diff -rupN original/ganglia-3.7.1/configure new/ganglia-3.7.1/configure
--- original/ganglia-3.7.1/configure	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/configure	2015-09-03 10:31:29.938067000 +0530
@@ -1,5 +1,5 @@
 #! /bin/sh
-# From configure.ac 3.7.0-128-g13c3a76.
+# From configure.ac .
 # Guess values for system-dependent variables and create Makefiles.
 # Generated by GNU Autoconf 2.69.
 #
@@ -12153,6 +12153,8 @@ _ACEOF
 
 fi
 
+LIBS="-lm  $LIBS"
+ 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for pthread_create in -lpthreads" >&5
 $as_echo_n "checking for pthread_create in -lpthreads... " >&6; }
 if ${ac_cv_lib_pthreads_pthread_create+:} false; then :
@@ -16005,7 +16007,7 @@ _ACEOF
 ac_config_files="$ac_config_files scripts/fixconfig"
 
 
-ac_config_files="$ac_config_files Makefile tests/Makefile ganglia.spec gmetad/Makefile lib/default_conf.h lib/Makefile gmond/Makefile gstat/Makefile gmond/modules/Makefile gmond/modules/example/Makefile gmond/modules/cpu/Makefile gmond/modules/disk/Makefile gmond/modules/memory/Makefile gmond/modules/network/Makefile gmond/modules/perl/Makefile gmond/modules/python/Makefile gmond/modules/status/Makefile gmond/modules/system/Makefile gmond/perl_modules/Makefile gmond/perl_modules/example/Makefile gmond/python_modules/Makefile gmond/python_modules/apache_status/Makefile gmond/python_modules/cpu/Makefile gmond/python_modules/db/Makefile gmond/python_modules/disk/Makefile gmond/python_modules/example/Makefile gmond/python_modules/memcached/Makefile gmond/python_modules/memory/Makefile gmond/python_modules/nfs/Makefile gmond/python_modules/network/Makefile gmond/python_modules/process/Makefile gmond/python_modules/ssl/Makefile gmond/python_modules/varnish/Makefile gmond/python_modules/vm_stats/Makefile gmond/python_modules/xen/Makefile gmetad/conf.c gmetad-python/setup.py gmetad-python/Gmetad/gmetad_config.py gmetad-python/gmetad-python.conf gmetad-python/plugins/rrd_plugin.py gmetric/Makefile include/Makefile mans/Makefile"
+ac_config_files="$ac_config_files Makefile tests/Makefile ganglia.spec gmetad/Makefile lib/default_conf.h lib/Makefile gmond/Makefile gstat/Makefile gmond/modules/Makefile gmond/modules/example/Makefile gmond/modules/cpu/Makefile gmond/modules/disk/Makefile gmond/modules/memory/Makefile gmond/modules/network/Makefile gmond/modules/bst/Makefile gmond/modules/perl/Makefile gmond/modules/python/Makefile gmond/modules/status/Makefile gmond/modules/system/Makefile gmond/perl_modules/Makefile gmond/perl_modules/example/Makefile gmond/python_modules/Makefile gmond/python_modules/apache_status/Makefile gmond/python_modules/cpu/Makefile gmond/python_modules/db/Makefile gmond/python_modules/disk/Makefile gmond/python_modules/example/Makefile gmond/python_modules/memcached/Makefile gmond/python_modules/memory/Makefile gmond/python_modules/nfs/Makefile gmond/python_modules/network/Makefile gmond/python_modules/process/Makefile gmond/python_modules/ssl/Makefile gmond/python_modules/varnish/Makefile gmond/python_modules/vm_stats/Makefile gmond/python_modules/xen/Makefile gmetad/conf.c gmetad-python/setup.py gmetad-python/Gmetad/gmetad_config.py gmetad-python/gmetad-python.conf gmetad-python/plugins/rrd_plugin.py gmetric/Makefile include/Makefile mans/Makefile"
 
 cat >confcache <<\_ACEOF
 # This file is a shell script that caches the results of configure
diff -rupN original/ganglia-3.7.1/ganglia.spec new/ganglia-3.7.1/ganglia.spec
--- original/ganglia-3.7.1/ganglia.spec	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/ganglia.spec	1970-01-01 05:30:00.000000000 +0530
@@ -1,622 +0,0 @@
-#
-#
-# ganglia.spec.  Generated from ganglia.spec.in by configure.
-#
-# IMPORTANT NOTE:
-# This spec file has conditional constructs using the noarch target.
-# To get all packages build you must include noarch and your real target
-# (ex: i386, i686, x86_64) when calling rpmbuild as shown by the following
-# command line aimed at 80386 or higher CPUs :
-#
-# % rpmbuild -ta --target noarch,i386 ganglia-3.7.1.tar.gz
-#
-%{!?python_sitelib: %define python_sitelib %(%{__python} -c "from distutils.sysconfig import get_python_lib; print get_python_lib()")}
-
-Summary: Ganglia Distributed Monitoring System
-Name: ganglia
-Version: 3.7.1
-URL: http://ganglia.info/
-# The Release macro value is set in configure.ac, please update it there.
-Release: 1
-License: BSD
-Vendor: Ganglia Development Team <ganglia-developers@lists.sourceforge.net>
-Group: System Environment/Base
-Source: %{name}-%{version}.tar.gz
-Buildroot: %{_tmppath}/%{name}-%{version}-buildroot
-BuildRequires: libpng-devel, libart_lgpl-devel, gcc-c++, python-devel, libconfuse-devel, make, pcre-devel, autoconf, automake, libtool, pkgconfig
-%if 0%{?suse_version}
-BuildRequires:  freetype2-devel, libapr1-devel
-%if 0%{?suse_version} > 1020
-BuildRequires: rrdtool-devel, libexpat-devel
-%else
-BuildRequires: rrdtool, expat
-%endif
-%else
-BuildRequires: expat-devel, rrdtool-devel, freetype-devel, apr-devel > 1
-%endif
-%define conf_dir /etc/ganglia
-%define gmond_conf %{_builddir}/%{?buildsubdir}/gmond/gmond.conf
-%define generate_gmond_conf %(test -e %gmond_conf && echo 0 || echo 1)
-
-%description
-Ganglia is a scalable, real-time monitoring and execution environment
-
-######################################################################
-################## noarch section ####################################
-######################################################################
-%ifarch noarch
-%package web
-Summary: Ganglia Web Frontend
-Group: System Environment/Base
-Obsoletes: ganglia-webfrontend < %{version}
-Provides: ganglia-webfrontend = %{version}
-# We should put rrdtool as a Requires too but rrdtool rpm support is very weak
-# so most people install from source
-#Requires: ganglia-gmetad >=  3.7.1
-Requires: php >= 5, php-gd, php-xml
-%if 0%{?suse_version}
-%define web_prefixdir /srv/www/htdocs/ganglia
-%else
-%define web_prefixdir /var/www/html/ganglia
-%endif
-Prefix: %{web_prefixdir}
-
-%description web
-This package provides a web frontend to display the XML tree published by
-ganglia, and to provide historical graphs of collected metrics. This website is
-written in the PHP5 language and uses the Dwoo templating engine.
-
-#######################################################################
-#######################################################################
-%else
-
-%package gmetad
-Summary: Ganglia Meta daemon http://ganglia.sourceforge.net/
-Group: System Environment/Base
-Obsoletes: ganglia-monitor-core-gmetad < %{version}
-Obsoletes: ganglia-monitor-core < %{version}
-Provides: ganglia-monitor-core-gmetad = %{version}
-Provides: ganglia-monitor-core = %{version}
-
-%description gmetad
-Ganglia is a scalable, real-time monitoring and execution environment
-with all execution requests and statistics expressed in an open
-well-defined XML format.
-
-This gmetad daemon aggregates monitoring data from several clusters
-to form a monitoring grid. It also keeps metric history using rrdtool.
-
-#%package gmetad-python
-#Summary: Ganglia Meta daemon in Python http://ganglia.sourceforge.net/
-#Group: System Environment/Base
-#Requires: python-rrdtool
-#Obsoletes: ganglia-monitor-core-gmetad < %{version}
-#Obsoletes: ganglia-monitor-core < %{version}
-#Provides: ganglia-monitor-core-gmetad = %{version}
-#Provides: ganglia-monitor-core = %{version}
-#Conflicts: ganglia-gmetad
-
-#%description gmetad-python
-#Ganglia is a scalable, real-time monitoring and execution environment
-#with all execution requests and statistics expressed in an open
-#well-defined XML format.
-
-#This gmetad daemon aggregates monitoring data from several clusters
-#to form a monitoring grid. It also keeps metric history using rrdtool.
-
-#gmetad-python is a re-write of the original gmetad code (written in C)
-#with pluggable interface.  The RRD files, both the metric RRDs and summary
-#RRDs are being written by RRD plugins rather than directly from gmetad.
-#This provides the ability to plug in new metric storage modules to support
-#other types of storage mechanisms other than RRD and also the ability to
-#plug in any type of gmetad-level analysis.
-
-%package gmond
-Summary: Ganglia Monitor daemon http://ganglia.sourceforge.net/
-Group: System Environment/Base
-Obsoletes: ganglia-monitor-core-gmond < %{version}
-Obsoletes: ganglia-monitor-core < %{version}
-Provides: ganglia-monitor-core-gmond = %{version}
-Provides: ganglia-monitor-core = %{version}
-
-%description gmond
-Ganglia is a scalable, real-time monitoring and execution environment
-with all execution requests and statistics expressed in an open
-well-defined XML format.
-
-This gmond daemon provides the ganglia service within a single cluster or
-Multicast domain.
-
-%package gmond-modules-python
-Summary: Ganglia Monitor daemon DSO/Python metric modules support http://ganglia.sourceforge.net/
-Group: System Environment/Base
-Requires: ganglia-gmond, python
-
-%description gmond-modules-python
-Ganglia is a scalable, real-time monitoring and execution environment
-with all execution requests and statistics expressed in an open
-well-defined XML format.
-
-This gmond modules support package provides the capability of loading gmetric/python modules
-via DSO at daemon start time instead of via gmetric
-
-%package devel
-Summary: Ganglia static libraries and header files http://ganglia.sourceforge.net/
-Group: Development/Libraries
-# revisit this list. it might be libtool bloat
-# MKN: Adjust requirements for SLES (20120229)
-%if 0%{?suse_version}
-Requires: libconfuse-devel, libapr1-devel, libganglia
-%if 0%{?suse_version} > 1020
-Requires: libexpat-devel
-%else
-Requires: expat
-%endif
-%else
-Requires: expat-devel, apr-devel > 1
-%endif
-
-%description devel
-The Ganglia Monitoring Core library provides a set of functions that programmers
-can use to build scalable cluster or grid applications
-
-%package -n libganglia
-Summary: Ganglia Shared Libraries http://ganglia.sourceforge.net/
-Group: System Environment/Base
-Obsoletes: libganglia-3_1_0
-
-%description -n libganglia
-The Ganglia Shared Libraries contains common libraries required by both gmond and
-gmetad packages
-
-%endif
-
-%prep
-%setup -n %{name}-%{version}
-
-%build
-%configure --with-gmetad --enable-status --sysconfdir=%{conf_dir}
-%ifnarch noarch
-make
-%endif
-#cd gmetad-python
-#%{__python} setup.py build
-
-%pre
-
-%ifnarch noarch
-
-%post gmetad
-%if 0%{?_unitdir:1}
-/bin/systemctl enable gmetad
-%else
-/sbin/chkconfig --add gmetad
-%endif
-
-if [ -e /etc/gmetad.conf ]; then
-  %__mv /etc/gmetad.conf %{conf_dir}
-fi
-
-#%post gmetad-python
-#/sbin/chkconfig --add gmetad-python
-
-%post gmond
-%if 0%{?_unitdir:1}
-/bin/systemctl enable gmond
-%else
-/sbin/chkconfig --add gmond
-%endif
-
-LEGACY_GMOND_CONF=%{conf_dir}/gmond.conf
-if [ -e /etc/gmond.conf ];
-then
-  LEGACY_GMOND_CONF=/etc/gmond.conf
-fi
-
-METRIC_LIST="`%{_sbindir}/gmond -c ${LEGACY_GMOND_CONF} -m`"
-if [[ $? != 0 ]]; then
-  # They may have an old configuration file format
-  echo "-----------------------------------------------------------"
-  echo "IMPORTANT IMPORTANT IMPORTANT IMPORTANT IMPORTANT IMPORTANT"
-  echo "-----------------------------------------------------------"
-  echo "Parsing your gmond.conf file failed"
-  echo "It appears that you are upgrading from ganglia gmond version"
-  echo "2.5.x.  The configuration file has changed and you need to "
-  echo "convert your old 2.5.x configuration file to the new format."
-  echo ""   
-  echo "To convert your old configuration file to the new format"
-  echo "simply run the command:"
-  echo ""
-  echo "% gmond --convert old.conf > new.conf"
-  echo ""
-  echo "This conversion was not made automatic to prevent unknowningly"
-  echo "altering your configuration without your notice."
-else
-  if [ `echo "$METRIC_LIST" | wc -l` -eq 0 ];
-  then
-    echo "-----------------------------------------------------------"
-    echo "IMPORTANT IMPORTANT IMPORTANT IMPORTANT IMPORTANT IMPORTANT"
-    echo "-----------------------------------------------------------"
-    echo "No metrics detected - perhaps you are using a gmond.conf"
-    echo "file from Ganglia 3.0 or earlier."
-    echo "Please see the README file for details about how to"
-    echo "create a valid configuration."
-  else
-    if [ -e /etc/gmond.conf ]; then
-      %__mv /etc/gmond.conf %{conf_dir}
-    fi
-  fi
-fi
-   
-%preun gmetad
-if [ "$1" = 0 ]
-then
-%if 0%{?_unitdir:1}
-   /bin/systemctl stop gmetad
-   /bin/systemctl disable gmetad
-%else
-   /etc/init.d/gmetad stop
-   /sbin/chkconfig --del gmetad
-%endif
-fi
-
-#%preun gmetad-python
-#if [ "$1" = 0 ]
-#then
-#   /etc/init.d/gmetad-python stop
-#   /sbin/chkconfig --del gmetad-python
-#fi
-
-%preun gmond
-if [ "$1" = 0 ]
-then
-%if 0%{?_unitdir:1}
-   /bin/systemctl stop gmond
-   /bin/systemctl disable gmond
-%else
-   /etc/init.d/gmond stop
-   /sbin/chkconfig --del gmond
-%endif
-fi
-
-%post   -n libganglia -p /sbin/ldconfig
-
-%postun -n libganglia -p /sbin/ldconfig
-
-%endif #ifnarch noarch
-
-%install
-# Flush any old RPM build root
-%__rm -rf $RPM_BUILD_ROOT
-
-%ifarch noarch
-
-%__make -C web 
-%__install -d -m 0755 $RPM_BUILD_ROOT%{web_prefixdir}
-%__cp -rf web/* $RPM_BUILD_ROOT%{web_prefixdir}
-%__rm -f $RPM_BUILD_ROOT%{web_prefixdir}/Makefile*
-%__rm -f $RPM_BUILD_ROOT%{web_prefixdir}/*.in
-%__install -d -m 0755 $RPM_BUILD_ROOT/var/lib/ganglia/dwoo
-%__install -d -m 0755 $RPM_BUILD_ROOT/var/lib/ganglia/conf
-%__install -d -m 0755 $RPM_BUILD_ROOT/var/lib/ganglia/dwoo/cache
-%__install -d -m 0755 $RPM_BUILD_ROOT/var/lib/ganglia/dwoo/compiled
-%__cp -f web/conf/*.json $RPM_BUILD_ROOT/var/lib/ganglia/conf
-
-%else
-
-# Create the directory structure
-%if 0%{?!_unitdir:1}
-%__install -d -m 0755 $RPM_BUILD_ROOT/etc/init.d
-%endif
-%__install -d -m 0755 $RPM_BUILD_ROOT/etc/sysconfig
-%__install -d -m 0755 $RPM_BUILD_ROOT/var/lib/ganglia/rrds
-
-# If we are not using systemd, we need to install initrd files.
-%if 0%{?!_unitdir:1}
-# Move the files into the structure
-%if 0%{?suse_version}
-   %__cp -f gmond/gmond.init.SuSE $RPM_BUILD_ROOT/etc/init.d/gmond
-   %__cp -f gmetad/gmetad.init.SuSE $RPM_BUILD_ROOT/etc/init.d/gmetad
-   #sed -e 's/sbin\/gmetad/sbin\/gmetad.py/' gmetad/gmetad.init.SuSE > $RPM_BUILD_ROOT/etc/init.d/gmetad-python
-   #chmod +x $RPM_BUILD_ROOT/etc/init.d/gmetad-python
-%else
-   %__cp -f gmond/gmond.init $RPM_BUILD_ROOT/etc/init.d/gmond
-   %__cp -f gmetad/gmetad.init $RPM_BUILD_ROOT/etc/init.d/gmetad
-   #sed -e 's/sbin\/gmetad/sbin\/gmetad.py/' gmetad/gmetad.init > $RPM_BUILD_ROOT/etc/init.d/gmetad-python
-   #chmod +x $RPM_BUILD_ROOT/etc/init.d/gmetad-python
-%endif
-%endif
-%__cp -f gmetad/gmetad-default $RPM_BUILD_ROOT/etc/sysconfig/gmetad
-
-%__install -d -m 0755 $RPM_BUILD_ROOT%{conf_dir}
-%__install -d -m 0755 $RPM_BUILD_ROOT%{conf_dir}/conf.d
-%__install -d -m 0755 $RPM_BUILD_ROOT%{_libdir}/ganglia/python_modules
-
-%if %generate_gmond_conf
-# We just output the default gmond.conf from gmond using the '-t' flag
-  gmond/gmond -t > $RPM_BUILD_ROOT%{conf_dir}/gmond.conf
-%else
-  %__cp -f %gmond_conf $RPM_BUILD_ROOT%{conf_dir}/gmond.conf
-%endif
-#%__cp -f gmetad/gmetad.conf $RPM_BUILD_ROOT%{conf_dir}/gmetad.conf
-%__cp -f gmond/modules/conf.d/* $RPM_BUILD_ROOT%{conf_dir}/conf.d
-
-# Copy the python metric modules and .conf files
-%__cp -f gmond/python_modules/conf.d/*.pyconf* $RPM_BUILD_ROOT%{conf_dir}/conf.d/
-%{__python} -c 'import compileall; compileall.compile_dir("gmond/python_modules", 1, "/", 1)' > /dev/null
-%{__python} -O -c 'import compileall; compileall.compile_dir("gmond/python_modules", 1, "/", 1)' > /dev/null
-%__cp -f gmond/python_modules/*/*.{py,pyc,pyo} $RPM_BUILD_ROOT%{_libdir}/ganglia/python_modules/
-
-# Don't install the example modules
-%__rm -f $RPM_BUILD_ROOT%{conf_dir}/conf.d/example.conf
-%__rm -f $RPM_BUILD_ROOT%{conf_dir}/conf.d/example.pyconf
-%__rm -f $RPM_BUILD_ROOT%{conf_dir}/conf.d/spfexample.pyconf
-
-# Clean up the .conf.in files
-%__rm -f $RPM_BUILD_ROOT%{conf_dir}/conf.d/*.conf.in
-
-# Disable the multicpu module until it is configured properly
-%__mv $RPM_BUILD_ROOT%{conf_dir}/conf.d/multicpu.conf $RPM_BUILD_ROOT%{conf_dir}/conf.d/multicpu.conf.disabled
-
-%__make DESTDIR=$RPM_BUILD_ROOT install
-%__make -C gmond gmond.conf.5
-
-# gmetad-python
-#cd gmetad-python
-#%{__python} setup.py install --prefix=/usr --skip-build --install-scripts=%{_sbindir} --root=$RPM_BUILD_ROOT
-#%{__python} -c 'import compileall; compileall.compile_dir("'"$RPM_BUILD_ROOT%{_libdir}/ganglia/python_modules/gmetad"'", 1, "/", 1)' > /dev/null
-#%{__python} -O -c 'import compileall; compileall.compile_dir("'"$RPM_BUILD_ROOT%{_libdir}/ganglia/python_modules/gmetad"'", 1, "/", 1)' > /dev/null
-#%{__python} -O -c 'import compileall; compileall.compile_dir("'"$RPM_BUILD_ROOT%{python_sitelib}/Gmetad"'", 1, "/", 1)' > /dev/null
-#%{__python} -c 'import compileall; compileall.compile_dir("'"$RPM_BUILD_ROOT%{_sbindir}"'", 1, "/", 1)' > /dev/null
-#%{__python} -O -c 'import compileall; compileall.compile_dir("'"$RPM_BUILD_ROOT%{_sbindir}"'", 1, "/", 1)' > /dev/null
-
-%endif
-
-%ifnarch noarch
-
-%files gmetad
-%defattr(-,root,root)
-%attr(0755,nobody,nobody)/var/lib/ganglia/
-%{_sbindir}/gmetad
-%if 0%{?_unitdir:1}
-%{_unitdir}/gmetad.service
-%else
-/etc/init.d/gmetad
-%endif
-%config(noreplace) /etc/sysconfig/gmetad
-%{_mandir}/man1/gmetad*1*
-%config(noreplace) %{conf_dir}/gmetad.conf
-
-#%files gmetad-python
-#%defattr(-,root,root)
-#%{_sbindir}/gmetad.py*
-#/etc/init.d/gmetad-python
-#%config(noreplace) %{conf_dir}/gmetad-python.conf
-#%{python_sitelib}/*
-#%dir %{_libdir}/ganglia
-#%dir %{_libdir}/ganglia/python_modules
-#%{_libdir}/ganglia/python_modules/gmetad*
-#%{_mandir}/man1/gmetad.py.1*
-
-%files gmond
-%defattr(-,root,root)
-%{_bindir}/gmetric
-%{_bindir}/gstat
-%{_sbindir}/gmond
-%if 0%{?_unitdir:1}
-%{_unitdir}/gmond.service
-%else
-/etc/init.d/gmond
-%endif
-%{_mandir}/man1/gmetric.1*
-%{_mandir}/man1/gmond.1*
-%{_mandir}/man1/gstat.1*
-%{_mandir}/man5/gmond.conf.5*
-%config(noreplace) %{conf_dir}/gmond.conf
-%dir %{conf_dir}
-%dir %{conf_dir}/conf.d/
-%config(noreplace) %{conf_dir}/conf.d/modgstatus.conf
-%dir %{_libdir}/ganglia/
-%{_libdir}/ganglia/modmulticpu.so*
-%{conf_dir}/conf.d/multicpu.conf*
-%{_libdir}/ganglia/modcpu.so*
-%{_libdir}/ganglia/moddisk.so*
-%{_libdir}/ganglia/modgstatus.so
-%{_libdir}/ganglia/modload.so*
-%{_libdir}/ganglia/modmem.so*
-%{_libdir}/ganglia/modnet.so*
-%{_libdir}/ganglia/modproc.so*
-%{_libdir}/ganglia/modsys.so*
-
-%files gmond-modules-python
-%defattr(-,root,root,-)
-%dir %{_libdir}/ganglia/python_modules/
-%{_libdir}/ganglia/python_modules/*.py*
-%{_libdir}/ganglia/modpython.so*
-%config(noreplace) %{conf_dir}/conf.d/modpython.conf
-%config(noreplace) %{conf_dir}/conf.d/*.pyconf*
-
-%files devel
-%defattr(-,root,root,-)
-%{_includedir}/ganglia.h
-%{_includedir}/ganglia_gexec.h
-%{_includedir}/gm_file.h
-%{_includedir}/gm_metric.h
-%{_includedir}/gm_mmn.h
-%{_includedir}/gm_msg.h
-%{_includedir}/gm_protocol.h
-%{_includedir}/gm_value.h
-%{_libdir}/libganglia*.so
-%{_libdir}/libganglia*.*a
-%{_bindir}/ganglia-config
-
-%files -n libganglia
-%defattr(-,root,root,-)
-%{_libdir}/libganglia*.so.*
-
-%else
-
-%files web
-%defattr(-,root,root)
-%attr(0755,apache,apache)/var/lib/ganglia/dwoo
-%attr(0755,apache,apache)/var/lib/ganglia/dwoo/compiled
-%attr(0755,apache,apache)/var/lib/ganglia/dwoo/cache
-%dir %{web_prefixdir}/
-%dir %{web_prefixdir}/dwoo
-/var/lib/ganglia/conf
-%{web_prefixdir}/*
-
-%endif
-
-%clean
-%__rm -rf $RPM_BUILD_ROOT
-
-%changelog
-* Thu Feb 27 2014 Olivier Lahaye <olivier.lahaye@cea.fr>
-- Add native systemd support in package.
-* Thu Mar 31 2011 Bernard Li <bernard@vanhpc.org>
-- Allow file permissions for gmetric and gstat to be automatically set
-* Thu Mar 31 2011 Bernard Li <bernard@vanhpc.org>
-- Allow file permissions for gmetric and gstat to be automatically set
-* Wed Jan 26 2011 Bernard Li <bernard@vanhpc.org>
-- Remove manual steps to install manpages as they are now installed via `make install`
-- Include manpage for gmetad-python
-- Remove hardcoded library version for libganglia
-* Wed Jan 12 2011 Bernard Li <bernard@vanhpc.org>
-- Fix gmetad-python subpackage not including files from Python site-packages dir
-- Break gmetad-python installation into build and install stages
-- Byte compile additional gmond-modules-python and gmetad-python scripts
-- Do not include spfexample.pyconf
-* Wed Sep  8 2010 Bernard Li <bernard@vanhpc.org>
-- Replace TemplatePower with Dwoo for PHP templating engine
-* Tue Aug 17 2010 Bernard Li <bernard@vanhpc.org>
-- Use the 'install' target for web/ instead of calling make on
-  conf.php and version.php individually
-* Tue Jan 12 2010 Daniel Pocock <daniel@pocock.com.au>
-- Add eval_config.php to files list
-* Tue Jan  5 2010 Daniel Pocock <daniel@pocock.com.au>
-- Add dependency on pcre-devel
-* Thu Sep 17 2009 Jesse Becker <hawson@gmail.com>
-- Use %{version} tags where possible instead of hard-coding
-* Thu Jul 30 2009 Daniel Pocock <daniel@pocock.com.au>
-- gstatus is now compiled and included in the RPM, but not loaded by default
-* Sun Jun 14 2009 Carlo Marcelo Arenas Belon <carenas@sajinet.com.pe>
-- expat-devel is needed for building gstat
-* Sat Nov 15 2008 Carlo Marcelo Arenas Belon <carenas@sajinet.com.pe>
-- Update manually selected list of files in %{web_prefixdir}
-* Sat Oct 25 2008 Carlo Marcelo Arenas Belon <carenas@sajinet.com.pe>
-- Instruct RPM to byte compile python modules at install time
-* Wed Oct 01 2008 Carlo Marcelo Arenas Belon <carenas@sajinet.com.pe>
-- Add missing defattr for gmond-modules-python
-* Wed Jul 30 2008 Bernard Li <bernard@vanhpc.org>
-- Add make to BuildRequires
-* Sun Jul 20 2008 Carlo Marcelo Arenas Belon <carenas@sajinet.com.pe>
-- Remove ChangeLog from ganglia-web
-* Tue Jun 10 2008 Bernard Li <bernard@vanhpc.org>
-- New subpackage gmetad-python for the Python re-write of gmetad
-* Wed Jun 04 2008 Bernard Li <bernard@vanhpc.org>
-- Add ganglia_gexec.h to ganglia-devel package
-* Tue May 06 2008 Bernard Li <bernard@vanhpc.org>
-- Removed host_gmetrics.php from ganglia-web
-* Tue Apr 15 2008 Bernard Li <bernard@vanhpc.org>
-- Cleanup of *.{la,a} in %{_libdir}/ganglia is not needed anymore
-* Mon Mar 31 2008 Carlo Marcelo Arenas Belon <carenas@sajinet.com.pe>
-- Add gm_value.h and gm_msg.h
-* Fri Mar 28 2008 Brad Nicholes <bnicholes@novell.com>
-- Add the headers file in the include directory
-* Thu Mar 27 2008 Bernard Li <bernard@vanhpc.org>
-- Added man1 pages gmetad, gmetric, gmond, gstat
-* Thu Mar 13 2008 Jesse Becker <hawson@gmail.com>
-- Add web/graph.d directory and contents to %files.
-* Fri Feb 15 2008 Bernard Li <bernard@vanhpc.org>
-- Fix bug where .pyconf files are copied to %{_libdir}/ganglia/python_modules
-- Enable tcpconn.py by default since code is now compatible with Python 2.3.x
-- No longer need to run %configure when building ganglia-web (noarch)
-* Tue Dec 18 2007 Brad Nicholes <bnicholes@novell.com>
-- Remove all built in metrics and replace them with metric modules
-* Thu Nov 29 2007 Brad Nicholes <bnicholes@novell.com>
-- Do not install the modgstatus.conf file
-- Add scoreboard.h to the -devel package
-* Fri Nov 16 2007 Bernard Li <bernard@vanhpc.org>
-- Set variable conf_dir to /etc/ganglia
-- Migrate /etc/{gmond,gmetad}.conf files to /etc/ganglia for upgrades etc.
-* Fri Nov 09 2007 Bernard Li <bernard@vanhpc.org>
-- Include .pyc files from /usr/local/lib64/ganglia/python_modules
-* Thu Nov 08 2007 Bernard Li <bernard@vanhpc.org>
-- Clean up /etc/ganglia/conf.d/*.conf.in files
-* Wed Oct 10 2007 Bernard Li <bernard@vanhpc.org>
-- Clean up comments -- they were affecting output of rpm -q --scripts
-- Spec by cleanup by darix, new package libganglia for common shared libraries
-- New package ganglia-gmond-modules-python
-* Tue Oct 9 2007 Brad Nicholes <bnicholes@novell.com>
-- Add tcpconn python metric module
-* Fri Jul 13 2007 Brad Nicholes <bnicholes@novell.com>
-- Don't install the example modules
-* Wed Jul 11 2007 Bernard Li <bernard@vanhpc.org>
-- Delete .in files in %{web_prefixdir}
-* Tue Jul 10 2007 Bernard Li <bernard@vanhpc.org>
-- Added python-devel to BuildRequires
-* Tue Jul 3 2007 Brad Nicholes <bnicholes@novell.com>
-- Add the python modules and configuration
-* Thu Jun 14 2007 Brad Nicholes <bnicholes@novell.com>
-- Build the python support module by default
-* Fri May 18 2007 Bernard Li <bernard@vanhpc.org>
-- Add php-gd to web subpackage Requires
-* Wed May 9 2007 Brad Nicholes <bnicholes@novell.com>
-- Converted to dynamically link all external libraries
-* Fri Apr 27 2007 Bernard Li <bernard@vanhpc.org>
-- Add apr-devel to BuildRequires for distro other than SuSE
-  (Red Hat/Fedora/Mandriva)
-* Wed Apr 25 2007 Brad Nicholes <bnicholes@novell.com>
-- Dynamically link APR rather than statically linking
-  the Ganglia version of APR.
-* Thu Apr 12 2007 Brad Nicholes <bnicholes@novell.com>
-- Move the main .conf file out of /etc and into /etc/ganglia
-* Fri Apr 06 2007 Brad Nicholes <bnicholes@novell.com>
-- install the module .conf files under a /etc/ganglia/conf.d 
-  directory and list the file owner of the .conf files and 
-  the module DSOs
-* Wed Apr 04 2007 Bernard Li <bernard@vanhpc.org>
-- Added libmodexample* files to ganglia-gmond sub-package
-* Tue Apr 03 2007 Bernard Li <bernard@vanhpc.org>
-- Applied patch from Marcus Rueckert
-- Use different web_prefixdir for SuSE
-- More extensive use of RPM macroes (eg. %{_mandir}, %{_sbindir})
-* Mon Jan 08 2007 Bernard Li <bernard@vanhpc.org>
-- Do not automatically start/restart services as this may cause 
-  ganglia to startup with bad config.
-* Mon Aug 28 2006 Bernard Li <bli@bcgsc.ca>
-- Added gcc-c++ to BuildRequires
-* Sun Jul 23 2006 Bernard Li <bli@bcgsc.ca>
-- Changed make install prefix=$RPM_BUILD_ROOT/usr to
-  make DESTDIR=$RPM_BUILD_ROOT install (suggested by Jarod Wilson
-  <jwilson@redhat.com>)
-* Mon Jun 05 2006 Bernard Li <bli@bcgsc.ca>
-- Changed /etc/rc.d/init.d -> /etc/init.d
-* Mon May 22 2006 Bernard Li <bli@bcgsc.ca>
-- Add rrdtool/rrdtool-devel, freetype2-devel/freetype-devel,
-  libart_lgpl-devel to BuildRequires
-- Use /usr/lib64 for x86_64
-* Sun May 21 2006 Bernard Li <bli@bcgsc.ca>
-- Correct init scripts dir for SuSE
-- Add BuildRequires for libpng-devel
-* Sat Feb 25 2006 Bernard Li <bli@bcgsc.ca>
-- Use SuSE specific init scripts if /etc/SuSE-release file exists
-* Fri Dec 10 2004 Matt Massie <massie@cs.berkeley.edu>
-- Updated the spec file for 2.6.0 release
-* Tue Apr 13 2004 Brooks Davis <brooks@one-eyed-alien.net>
-- Use the autoconf variable varstatedir instead of /var/lib for consistency.
-* Thu Feb 19 2004 Matt Massie <massie@cs.berkeley.edu>
-- Removed the /usr/include/ganglia directory from the lib rpm and
-  changed the deprecated Copyright to License
-* Mon Oct 14 2002 Federico Sacerdoti <fds@sdsc.edu>
-- Split package into -gmetad and -gmond subpackages for clarity,
-  and separation of purpose/functionality.
-* Thu Sep 19 2002 Federico Sacerdoti <fds@sdsc.edu>
-- Added config files, made /var/lib/ganglia for RRD storage.
-* Mon Mar 11 2002 Matt Massie <massie@cs.berkeley.edu>
-- Added support for libganglia, added Prefix: for RPM relocation
-* Wed Feb 27 2002 Matt Massie <massie@cs.berkeley.edu>
-- Merge gmetric and gmond together into one RPM.  Fix some small bugs.
-* Fri Nov  2 2001 Matt Massie <massie@cs.berkeley.edu>
-- initial release
diff -rupN original/ganglia-3.7.1/gmetad/cmdline.c new/ganglia-3.7.1/gmetad/cmdline.c
--- original/ganglia-3.7.1/gmetad/cmdline.c	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/gmetad/cmdline.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,555 +0,0 @@
-/*
-  File autogenerated by gengetopt version 2.22.4
-  generated with the following command:
-  gengetopt --c-extension=c.in --input ./cmdline.sh 
-
-  The developers of gengetopt consider the fixed text that goes in all
-  gengetopt output files to be in the public domain:
-  we make no copyright claims on it.
-*/
-
-/* If we use autoconf.  */
-#ifdef HAVE_CONFIG_H
-#include "config.h"
-#endif
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-
-#ifndef FIX_UNUSED
-#define FIX_UNUSED(X) (void) (X) /* avoid warnings for unused params */
-#endif
-
-#include <getopt.h>
-
-#include "cmdline.h"
-
-const char *gengetopt_args_info_purpose = "The Ganglia Meta Daemon (gmetad) collects information from\nmultiple gmond or gmetad data sources, saves the information to local\nround-robin databases, and exports XML which is the concatentation of\nall data sources";
-
-const char *gengetopt_args_info_usage = "Usage: gmetad [OPTIONS]...";
-
-const char *gengetopt_args_info_description = "";
-
-const char *gengetopt_args_info_help[] = {
-  "  -h, --help             Print help and exit",
-  "  -V, --version          Print version and exit",
-  "  -c, --conf=STRING      Location of gmetad configuration file  \n                           (default=`/usr/local/etc/gmetad.conf')",
-  "  -d, --debug=INT        Debug level. If greater than zero, daemon will stay in \n                           foreground.  (default=`0')",
-  "  -p, --pid-file=STRING  Write process-id to file",
-    0
-};
-
-typedef enum {ARG_NO
-  , ARG_STRING
-  , ARG_INT
-} cmdline_parser_arg_type;
-
-static
-void clear_given (struct gengetopt_args_info *args_info);
-static
-void clear_args (struct gengetopt_args_info *args_info);
-
-static int
-cmdline_parser_internal (int argc, char **argv, struct gengetopt_args_info *args_info,
-                        struct cmdline_parser_params *params, const char *additional_error);
-
-
-static char *
-gengetopt_strdup (const char *s);
-
-static
-void clear_given (struct gengetopt_args_info *args_info)
-{
-  args_info->help_given = 0 ;
-  args_info->version_given = 0 ;
-  args_info->conf_given = 0 ;
-  args_info->debug_given = 0 ;
-  args_info->pid_file_given = 0 ;
-}
-
-static
-void clear_args (struct gengetopt_args_info *args_info)
-{
-  FIX_UNUSED (args_info);
-  args_info->conf_arg = gengetopt_strdup ("/usr/local/etc/gmetad.conf");
-  args_info->conf_orig = NULL;
-  args_info->debug_arg = 0;
-  args_info->debug_orig = NULL;
-  args_info->pid_file_arg = NULL;
-  args_info->pid_file_orig = NULL;
-  
-}
-
-static
-void init_args_info(struct gengetopt_args_info *args_info)
-{
-
-
-  args_info->help_help = gengetopt_args_info_help[0] ;
-  args_info->version_help = gengetopt_args_info_help[1] ;
-  args_info->conf_help = gengetopt_args_info_help[2] ;
-  args_info->debug_help = gengetopt_args_info_help[3] ;
-  args_info->pid_file_help = gengetopt_args_info_help[4] ;
-  
-}
-
-void
-cmdline_parser_print_version (void)
-{
-  printf ("%s %s\n",
-     (strlen(CMDLINE_PARSER_PACKAGE_NAME) ? CMDLINE_PARSER_PACKAGE_NAME : CMDLINE_PARSER_PACKAGE),
-     CMDLINE_PARSER_VERSION);
-}
-
-static void print_help_common(void) {
-  cmdline_parser_print_version ();
-
-  if (strlen(gengetopt_args_info_purpose) > 0)
-    printf("\n%s\n", gengetopt_args_info_purpose);
-
-  if (strlen(gengetopt_args_info_usage) > 0)
-    printf("\n%s\n", gengetopt_args_info_usage);
-
-  printf("\n");
-
-  if (strlen(gengetopt_args_info_description) > 0)
-    printf("%s\n\n", gengetopt_args_info_description);
-}
-
-void
-cmdline_parser_print_help (void)
-{
-  int i = 0;
-  print_help_common();
-  while (gengetopt_args_info_help[i])
-    printf("%s\n", gengetopt_args_info_help[i++]);
-}
-
-void
-cmdline_parser_init (struct gengetopt_args_info *args_info)
-{
-  clear_given (args_info);
-  clear_args (args_info);
-  init_args_info (args_info);
-}
-
-void
-cmdline_parser_params_init(struct cmdline_parser_params *params)
-{
-  if (params)
-    { 
-      params->override = 0;
-      params->initialize = 1;
-      params->check_required = 1;
-      params->check_ambiguity = 0;
-      params->print_errors = 1;
-    }
-}
-
-struct cmdline_parser_params *
-cmdline_parser_params_create(void)
-{
-  struct cmdline_parser_params *params = 
-    (struct cmdline_parser_params *)malloc(sizeof(struct cmdline_parser_params));
-  cmdline_parser_params_init(params);  
-  return params;
-}
-
-static void
-free_string_field (char **s)
-{
-  if (*s)
-    {
-      free (*s);
-      *s = 0;
-    }
-}
-
-
-static void
-cmdline_parser_release (struct gengetopt_args_info *args_info)
-{
-
-  free_string_field (&(args_info->conf_arg));
-  free_string_field (&(args_info->conf_orig));
-  free_string_field (&(args_info->debug_orig));
-  free_string_field (&(args_info->pid_file_arg));
-  free_string_field (&(args_info->pid_file_orig));
-  
-  
-
-  clear_given (args_info);
-}
-
-
-static void
-write_into_file(FILE *outfile, const char *opt, const char *arg, const char *values[])
-{
-  FIX_UNUSED (values);
-  if (arg) {
-    fprintf(outfile, "%s=\"%s\"\n", opt, arg);
-  } else {
-    fprintf(outfile, "%s\n", opt);
-  }
-}
-
-
-int
-cmdline_parser_dump(FILE *outfile, struct gengetopt_args_info *args_info)
-{
-  int i = 0;
-
-  if (!outfile)
-    {
-      fprintf (stderr, "%s: cannot dump options to stream\n", CMDLINE_PARSER_PACKAGE);
-      return EXIT_FAILURE;
-    }
-
-  if (args_info->help_given)
-    write_into_file(outfile, "help", 0, 0 );
-  if (args_info->version_given)
-    write_into_file(outfile, "version", 0, 0 );
-  if (args_info->conf_given)
-    write_into_file(outfile, "conf", args_info->conf_orig, 0);
-  if (args_info->debug_given)
-    write_into_file(outfile, "debug", args_info->debug_orig, 0);
-  if (args_info->pid_file_given)
-    write_into_file(outfile, "pid-file", args_info->pid_file_orig, 0);
-  
-
-  i = EXIT_SUCCESS;
-  return i;
-}
-
-int
-cmdline_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
-{
-  FILE *outfile;
-  int i = 0;
-
-  outfile = fopen(filename, "w");
-
-  if (!outfile)
-    {
-      fprintf (stderr, "%s: cannot open file for writing: %s\n", CMDLINE_PARSER_PACKAGE, filename);
-      return EXIT_FAILURE;
-    }
-
-  i = cmdline_parser_dump(outfile, args_info);
-  fclose (outfile);
-
-  return i;
-}
-
-void
-cmdline_parser_free (struct gengetopt_args_info *args_info)
-{
-  cmdline_parser_release (args_info);
-}
-
-/** @brief replacement of strdup, which is not standard */
-char *
-gengetopt_strdup (const char *s)
-{
-  char *result = 0;
-  if (!s)
-    return result;
-
-  result = (char*)malloc(strlen(s) + 1);
-  if (result == (char*)0)
-    return (char*)0;
-  strcpy(result, s);
-  return result;
-}
-
-int
-cmdline_parser (int argc, char **argv, struct gengetopt_args_info *args_info)
-{
-  return cmdline_parser2 (argc, argv, args_info, 0, 1, 1);
-}
-
-int
-cmdline_parser_ext (int argc, char **argv, struct gengetopt_args_info *args_info,
-                   struct cmdline_parser_params *params)
-{
-  int result;
-  result = cmdline_parser_internal (argc, argv, args_info, params, 0);
-
-  if (result == EXIT_FAILURE)
-    {
-      cmdline_parser_free (args_info);
-      exit (EXIT_FAILURE);
-    }
-  
-  return result;
-}
-
-int
-cmdline_parser2 (int argc, char **argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
-{
-  int result;
-  struct cmdline_parser_params params;
-  
-  params.override = override;
-  params.initialize = initialize;
-  params.check_required = check_required;
-  params.check_ambiguity = 0;
-  params.print_errors = 1;
-
-  result = cmdline_parser_internal (argc, argv, args_info, &params, 0);
-
-  if (result == EXIT_FAILURE)
-    {
-      cmdline_parser_free (args_info);
-      exit (EXIT_FAILURE);
-    }
-  
-  return result;
-}
-
-int
-cmdline_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
-{
-  FIX_UNUSED (args_info);
-  FIX_UNUSED (prog_name);
-  return EXIT_SUCCESS;
-}
-
-
-static char *package_name = 0;
-
-/**
- * @brief updates an option
- * @param field the generic pointer to the field to update
- * @param orig_field the pointer to the orig field
- * @param field_given the pointer to the number of occurrence of this option
- * @param prev_given the pointer to the number of occurrence already seen
- * @param value the argument for this option (if null no arg was specified)
- * @param possible_values the possible values for this option (if specified)
- * @param default_value the default value (in case the option only accepts fixed values)
- * @param arg_type the type of this option
- * @param check_ambiguity @see cmdline_parser_params.check_ambiguity
- * @param override @see cmdline_parser_params.override
- * @param no_free whether to free a possible previous value
- * @param multiple_option whether this is a multiple option
- * @param long_opt the corresponding long option
- * @param short_opt the corresponding short option (or '-' if none)
- * @param additional_error possible further error specification
- */
-static
-int update_arg(void *field, char **orig_field,
-               unsigned int *field_given, unsigned int *prev_given, 
-               char *value, const char *possible_values[],
-               const char *default_value,
-               cmdline_parser_arg_type arg_type,
-               int check_ambiguity, int override,
-               int no_free, int multiple_option,
-               const char *long_opt, char short_opt,
-               const char *additional_error)
-{
-  char *stop_char = 0;
-  const char *val = value;
-  int found;
-  char **string_field;
-  FIX_UNUSED (field);
-
-  stop_char = 0;
-  found = 0;
-
-  if (!multiple_option && prev_given && (*prev_given || (check_ambiguity && *field_given)))
-    {
-      if (short_opt != '-')
-        fprintf (stderr, "%s: `--%s' (`-%c') option given more than once%s\n", 
-               package_name, long_opt, short_opt,
-               (additional_error ? additional_error : ""));
-      else
-        fprintf (stderr, "%s: `--%s' option given more than once%s\n", 
-               package_name, long_opt,
-               (additional_error ? additional_error : ""));
-      return 1; /* failure */
-    }
-
-  FIX_UNUSED (default_value);
-    
-  if (field_given && *field_given && ! override)
-    return 0;
-  if (prev_given)
-    (*prev_given)++;
-  if (field_given)
-    (*field_given)++;
-  if (possible_values)
-    val = possible_values[found];
-
-  switch(arg_type) {
-  case ARG_INT:
-    if (val) *((int *)field) = strtol (val, &stop_char, 0);
-    break;
-  case ARG_STRING:
-    if (val) {
-      string_field = (char **)field;
-      if (!no_free && *string_field)
-        free (*string_field); /* free previous string */
-      *string_field = gengetopt_strdup (val);
-    }
-    break;
-  default:
-    break;
-  };
-
-  /* check numeric conversion */
-  switch(arg_type) {
-  case ARG_INT:
-    if (val && !(stop_char && *stop_char == '\0')) {
-      fprintf(stderr, "%s: invalid numeric value: %s\n", package_name, val);
-      return 1; /* failure */
-    }
-    break;
-  default:
-    ;
-  };
-
-  /* store the original value */
-  switch(arg_type) {
-  case ARG_NO:
-    break;
-  default:
-    if (value && orig_field) {
-      if (no_free) {
-        *orig_field = value;
-      } else {
-        if (*orig_field)
-          free (*orig_field); /* free previous string */
-        *orig_field = gengetopt_strdup (value);
-      }
-    }
-  };
-
-  return 0; /* OK */
-}
-
-
-int
-cmdline_parser_internal (
-  int argc, char **argv, struct gengetopt_args_info *args_info,
-                        struct cmdline_parser_params *params, const char *additional_error)
-{
-  int c;	/* Character of the parsed option.  */
-
-  int error = 0;
-  struct gengetopt_args_info local_args_info;
-  
-  int override;
-  int initialize;
-  int check_required;
-  int check_ambiguity;
-  
-  package_name = argv[0];
-  
-  override = params->override;
-  initialize = params->initialize;
-  check_required = params->check_required;
-  check_ambiguity = params->check_ambiguity;
-
-  if (initialize)
-    cmdline_parser_init (args_info);
-
-  cmdline_parser_init (&local_args_info);
-
-  optarg = 0;
-  optind = 0;
-  opterr = params->print_errors;
-  optopt = '?';
-
-  while (1)
-    {
-      int option_index = 0;
-
-      static struct option long_options[] = {
-        { "help",	0, NULL, 'h' },
-        { "version",	0, NULL, 'V' },
-        { "conf",	1, NULL, 'c' },
-        { "debug",	1, NULL, 'd' },
-        { "pid-file",	1, NULL, 'p' },
-        { 0,  0, 0, 0 }
-      };
-
-      c = getopt_long (argc, argv, "hVc:d:p:", long_options, &option_index);
-
-      if (c == -1) break;	/* Exit from `while (1)' loop.  */
-
-      switch (c)
-        {
-        case 'h':	/* Print help and exit.  */
-          cmdline_parser_print_help ();
-          cmdline_parser_free (&local_args_info);
-          exit (EXIT_SUCCESS);
-
-        case 'V':	/* Print version and exit.  */
-          cmdline_parser_print_version ();
-          cmdline_parser_free (&local_args_info);
-          exit (EXIT_SUCCESS);
-
-        case 'c':	/* Location of gmetad configuration file.  */
-        
-        
-          if (update_arg( (void *)&(args_info->conf_arg), 
-               &(args_info->conf_orig), &(args_info->conf_given),
-              &(local_args_info.conf_given), optarg, 0, "/usr/local/etc/gmetad.conf", ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "conf", 'c',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'd':	/* Debug level. If greater than zero, daemon will stay in foreground..  */
-        
-        
-          if (update_arg( (void *)&(args_info->debug_arg), 
-               &(args_info->debug_orig), &(args_info->debug_given),
-              &(local_args_info.debug_given), optarg, 0, "0", ARG_INT,
-              check_ambiguity, override, 0, 0,
-              "debug", 'd',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'p':	/* Write process-id to file.  */
-        
-        
-          if (update_arg( (void *)&(args_info->pid_file_arg), 
-               &(args_info->pid_file_orig), &(args_info->pid_file_given),
-              &(local_args_info.pid_file_given), optarg, 0, 0, ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "pid-file", 'p',
-              additional_error))
-            goto failure;
-        
-          break;
-
-        case 0:	/* Long option with no short option */
-        case '?':	/* Invalid option.  */
-          /* `getopt_long' already printed an error message.  */
-          goto failure;
-
-        default:	/* bug: option not considered.  */
-          fprintf (stderr, "%s: option unknown: %c%s\n", CMDLINE_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
-          abort ();
-        } /* switch */
-    } /* while */
-
-
-
-
-  cmdline_parser_release (&local_args_info);
-
-  if ( error )
-    return (EXIT_FAILURE);
-
-  return 0;
-
-failure:
-  
-  cmdline_parser_release (&local_args_info);
-  return (EXIT_FAILURE);
-}
diff -rupN original/ganglia-3.7.1/gmetad/conf.c new/ganglia-3.7.1/gmetad/conf.c
--- original/ganglia-3.7.1/gmetad/conf.c	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/gmetad/conf.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,547 +0,0 @@
-#include <dotconf.h>
-#include <string.h>
-#include <gmetad.h>
-#include <ganglia.h>
-#include "conf.h"
-
-/* Variables that get filled in by configuration file */
-extern Source_t root;
-extern hash_t *sources;
-
-gmetad_config_t gmetad_config;
-
-#define GANGLIA_HOSTNAME_LEN  128
-
-static DOTCONF_CB(cb_gridname)
-{
-    gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-    debug_msg("Grid name %s", cmd->data.str);
-    c->gridname = strdup(cmd->data.str);
-    return NULL;
-}
-
-static DOTCONF_CB(cb_authority)
-{
-   /* See gmetad.h for why we record strings this way. */
-    debug_msg("Grid authority %s", cmd->data.str);
-    root.authority_ptr = 0;
-    strcpy(root.strings, cmd->data.str);
-    root.stringslen += strlen(root.strings) + 1;
-    return NULL;
-}
-
-static DOTCONF_CB(cb_all_trusted)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("All hosts are trusted!");
-   c->all_trusted = 1;
-   return NULL;
-}
-
-static DOTCONF_CB(cb_trusted_hosts)
-{
-   int i,rv;
-   llist_entry *le;
-   struct sockaddr_in sa;
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-
-   for (i = 0; i < cmd->arg_count; i++)
-      {
-         le = (llist_entry *)malloc(sizeof(llist_entry));
-         rv = g_gethostbyname( cmd->data.list[i], &sa, NULL);
-         if (!rv) {
-            err_msg("Warning: we failed to resolve trusted host name %s", cmd->data.list[i]);
-            continue;
-         }
-         le->val = (char*) malloc(GANGLIA_HOSTNAME_LEN);
-         my_inet_ntop(AF_INET, &sa.sin_addr, le->val, GANGLIA_HOSTNAME_LEN);
-         llist_add(&(c->trusted_hosts), le);
-      }
-   return NULL;
-}
-
-static DOTCONF_CB(cb_RRAs)
-{
-  int i;
-  gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-  c->num_RRAs = cmd->arg_count;
-  for(i = 0; i < c->num_RRAs; i++)
-    {
-      c->RRAs[i] = strdup(cmd->data.list[i]);
-    }
-  return NULL;
-}
-
-static DOTCONF_CB(cb_data_source)
-{
-   unsigned int i;
-   data_source_list_t *dslist;
-   datum_t key, val, *find;
-   int port, rv=0;
-   unsigned long step;
-   unsigned int source_index=0;
-   char *p, *str;
-   char *endptr;
-   struct sockaddr_in sa;
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-
-   source_index++;
-
-   debug_msg("Datasource = [%s]", cmd->data.list[0]);
-
-   dslist = (data_source_list_t *) malloc ( sizeof(data_source_list_t) );
-   if(!dslist)
-      {
-         err_quit("Unable to malloc data source list");
-      }
-
-   dslist->name = strdup( cmd->data.list[0] );
-
-  /* Set data source step (avg polling interval). Default is 15s.
-   * Be careful of the case where the source is an ip address,
-   * in which case endptr = '.'
-   */
-  i=1;
-  step=strtoul(cmd->data.list[i], &endptr, 10);
-   if (step && *endptr == '\0')
-      {
-         dslist->step = step;
-         i++;
-      }
-   else
-      dslist->step = 15;
-
-   debug_msg("Polling interval for %s is %u sec.", dslist->name, dslist->step);
-   c->shortest_step = dslist->step;
-
-   dslist->sources = (g_inet_addr **) malloc( (cmd->arg_count-i) * sizeof(g_inet_addr *) );
-   if (! dslist->sources )
-      err_quit("Unable to malloc sources array");
-
-   dslist->num_sources = 0;
-   dslist->last_good_index = -1;
-
-   for ( ; i< cmd->arg_count; i++)
-      {
-         str = cmd->data.list[i];
-
-         p = strchr( str, ':' );
-         if( p )
-            {
-               /* Port is specified */
-               *p = '\0';
-               port = atoi ( p+1 );
-            }
-         else
-            port = 8649;
-
-         rv = g_gethostbyname( cmd->data.list[i], &sa, NULL);
-         if (!rv) {
-            err_msg("Warning: we failed to resolve data source name %s", cmd->data.list[i]);
-            continue;
-         }
-         str = (char*) malloc(GANGLIA_HOSTNAME_LEN);
-         my_inet_ntop(AF_INET, &sa.sin_addr, str, GANGLIA_HOSTNAME_LEN);
-
-         debug_msg("Trying to connect to %s:%d for [%s]", str, port, dslist->name);
-         dslist->sources[dslist->num_sources] = (g_inet_addr *) g_inetaddr_new ( str, port );
-         if(! dslist->sources[dslist->num_sources])
-               err_quit("Unable to create inetaddr [%s:%d] and save it to [%s]", str, port, dslist->name);
-         else
-               dslist->num_sources++;
-         free(str);
-      }
-
-   key.data = cmd->data.list[0];
-   key.size = strlen(key.data) + 1;
-
-   val.data = &dslist;
-   val.size = sizeof(dslist);
-
-   find  = hash_insert( &key, &val, sources );
-   if(!find)
-         err_quit("Unable to insert list pointer into source hash\n");
-   
-   debug_msg("Data inserted for [%s] into sources hash", (const char *) key.data);
-   return NULL;
-}
-
-static DOTCONF_CB(cb_debug_level)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   c->debug_level = cmd->data.value;
-   debug_msg("Setting the debug level to %ld", cmd->data.value);
-   return NULL;
-}
-
-static DOTCONF_CB(cb_xml_port)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Setting xml port to %ld", cmd->data.value);
-   c->xml_port = cmd->data.value;
-   return NULL;
-}
-
-static DOTCONF_CB(cb_interactive_port)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Setting interactive port to %ld", cmd->data.value);
-   c->interactive_port = cmd->data.value;
-   return NULL;
-}
-
-static DOTCONF_CB(cb_server_threads)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Setting number of xml server threads to %ld", cmd->data.value);
-   c->server_threads = cmd->data.value;
-   return NULL;
-}
-
-static DOTCONF_CB(cb_umask)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Setting umask to %.5lo & 07077", cmd->data.value);
-   c->umask = cmd->data.value & 07077; /* protect owner permissions */
-   return NULL;
-}
-
-static DOTCONF_CB(cb_rrd_rootdir)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Setting the RRD Rootdir to %s", cmd->data.str);
-   c->rrd_rootdir = strdup (cmd->data.str);
-   return NULL;
-}
-
-static DOTCONF_CB(cb_setuid_username)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Setting setuid username to %s", cmd->data.str);
-   c->setuid_username = strdup(cmd->data.str);
-   return NULL;
-}
-
-static DOTCONF_CB(cb_setuid)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   c->should_setuid = cmd->data.value;
-   return NULL;
-}
-
-static DOTCONF_CB(cb_scalable)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Setting scalable = %s", cmd->data.str);
-   if (!strcmp(cmd->data.str, "off"))
-      c->scalable_mode = 0;
-   return NULL;
-}
-
-static DOTCONF_CB(cb_write_rrds)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Setting write_rrds = %s", cmd->data.str);
-   if (!strcmp(cmd->data.str, "off"))
-       c->write_rrds = cmd->data.value;
-   return NULL;
-}
-
-static DOTCONF_CB(cb_case_sensitive_hostnames)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   c->case_sensitive_hostnames = cmd->data.value;
-   return NULL;
-}
-
-static DOTCONF_CB(cb_carbon_server)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Enabling Graphite proxy to %s", cmd->data.str);
-   c->carbon_server = strdup (cmd->data.str);
-   return NULL;
-}
-
-static DOTCONF_CB(cb_carbon_port)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Setting carbon port to %ld", cmd->data.value);
-   c->carbon_port = cmd->data.value;
-   return NULL;
-}
-
-static DOTCONF_CB(cb_carbon_protocol)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Setting carbon protocol to %s", cmd->data.str);
-   c->carbon_protocol = strdup (cmd->data.str);
-   return NULL;
-}
-
-static DOTCONF_CB(cb_carbon_timeout)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Setting carbon timeout to %ld", cmd->data.value);
-   c->carbon_timeout = cmd->data.value;
-   return NULL;
-}
-
-static DOTCONF_CB(cb_memcached_parameters)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Enabling memcached parameters to %s", cmd->data.str);
-   c->memcached_parameters = strdup (cmd->data.str);
-   return NULL;
-}
-
-static DOTCONF_CB(cb_memcached_include_cluster_in_key)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Setting memcached_include_cluster_in_key to %ld", cmd->data.value);
-   c->memcached_include_cluster_in_key = cmd->data.value;
-   return NULL;
-}
-
-static DOTCONF_CB(cb_graphite_prefix)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Enabling Graphite proxy to %s", cmd->data.str);
-   c->graphite_prefix = strdup (cmd->data.str);
-   return NULL;
-}
-
-static DOTCONF_CB(cb_graphite_path)
-{
-	gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-	debug_msg("Setting Graphite path to %s", cmd->data.str);
-	c->graphite_path = strdup (cmd->data.str);
-	return NULL;
-} 
-
-static DOTCONF_CB(cb_riemann_server)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Enabling Riemann forwarding to %s", cmd->data.str);
-   c->riemann_server = strdup (cmd->data.str);
-   return NULL;
-}
-
-static DOTCONF_CB(cb_riemann_port)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Setting Riemann port to %ld", cmd->data.value);
-   c->riemann_port = cmd->data.value;
-   return NULL;
-}
-
-static DOTCONF_CB(cb_riemann_protocol)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Setting Riemann protocol to %s", cmd->data.str);
-   c->riemann_protocol = strdup (cmd->data.str);
-   return NULL;
-}
-
-static DOTCONF_CB(cb_riemann_attributes)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Riemann key-value attributes %s", cmd->data.str);
-   c->riemann_attributes = strdup (cmd->data.str);
-   return NULL;
-}
-
-static DOTCONF_CB(cb_unsummarized_metrics)
-{
-   int i;
-   llist_entry *le;
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-
-   for (i = 0; i < cmd->arg_count; i++)
-      {
-         le = (llist_entry *)malloc(sizeof(llist_entry));
-         le->val = strdup(cmd->data.list[i]);
-         llist_add(&(c->unsummarized_metrics), le);
-         debug_msg("Adding %s to unsummarized_metrics", (const char *) le->val);
-      }
-   return NULL;
-}
-
-static DOTCONF_CB(cb_unsummarized_sflow_vm_metrics)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   debug_msg("Setting unsummarized_sflow_vm_metrics = %ld", cmd->data.value);
-   c->unsummarized_sflow_vm_metrics = cmd->data.value;
-   return NULL;
-}
-
-static DOTCONF_CB(cb_summarized_metrics)
-{
-   int i;
-   llist_entry *le;
-   gmetad_config_t *c = cmd->option->info;
-
-   for (i = 0; i < cmd->arg_count; i++)
-      {
-         le = malloc(sizeof(*le));
-         le->val = strdup(cmd->data.list[i]);
-         llist_add(&(c->summarized_metrics), le);
-         debug_msg("Adding %s to summarized_metrics", (const char *)le->val);
-      }
-   return NULL;
-}
-
-static DOTCONF_CB(cb_rrdcached_address)
-{
-   gmetad_config_t *c = (gmetad_config_t*) cmd->option->info;
-   char *ip, *tmp, *f;
-   long port;
-
-   f = tmp = strdup(cmd->data.str);
-   if ((ip = strsep(&tmp, ":")) == NULL ||
-       inet_pton(AF_INET, ip, &c->rrdcached_address.sin_addr) != 1)
-      {
-         err_quit("Expected IPv4 address in form a.b.c.d:port for "
-                  "rrdcached_address, got %s\n", cmd->data.str);
-      }
-   port = strtol(tmp, NULL, 10);
-   if ((port == 0 && errno == EINVAL) ||
-       ((port == LONG_MIN || port == LONG_MAX) && errno == ERANGE) ||
-       port < 0 || port > 65535)
-      {
-         err_quit("Expected IPv4 port within range; got %s\n", tmp);
-      }
-
-   c->rrdcached_address.sin_family = AF_INET;
-   c->rrdcached_address.sin_port = htons(port);
-   c->rrdcached_addrstr = strdup(cmd->data.str);
-   free(f);
-
-   return NULL;
-}
-
-static FUNC_ERRORHANDLER(errorhandler)
-{
-   err_quit("gmetad config file error: %s\n", msg);
-   return 0;
-}
-
-static configoption_t gmetad_options[] =
-   {
-      {"data_source", ARG_LIST, cb_data_source, &gmetad_config, 0},
-      {"gridname", ARG_STR, cb_gridname, &gmetad_config, 0},
-      {"authority", ARG_STR, cb_authority, &gmetad_config, 0},
-      {"trusted_hosts", ARG_LIST, cb_trusted_hosts, &gmetad_config, 0},
-      {"all_trusted", ARG_INT, cb_all_trusted, &gmetad_config, 0},
-      {"debug_level",  ARG_INT,  cb_debug_level, &gmetad_config, 0},
-      {"xml_port",  ARG_INT, cb_xml_port, &gmetad_config, 0},
-      {"interactive_port", ARG_INT, cb_interactive_port, &gmetad_config, 0},
-      {"server_threads", ARG_INT, cb_server_threads, &gmetad_config, 0},
-      {"umask", ARG_INT, cb_umask, &gmetad_config, 0},
-      {"rrd_rootdir", ARG_STR, cb_rrd_rootdir, &gmetad_config, 0},
-      {"rrdcached_address", ARG_STR, cb_rrdcached_address, &gmetad_config, 0},
-      {"setuid", ARG_TOGGLE, cb_setuid, &gmetad_config, 0},
-      {"setuid_username", ARG_STR, cb_setuid_username, &gmetad_config, 0},
-      {"scalable", ARG_STR, cb_scalable, &gmetad_config, 0},
-      {"write_rrds", ARG_STR, cb_write_rrds, &gmetad_config, 0},
-      {"RRAs", ARG_LIST, cb_RRAs, &gmetad_config, 0},
-      {"case_sensitive_hostnames", ARG_INT, cb_case_sensitive_hostnames, &gmetad_config, 0},
-      {"carbon_server", ARG_STR, cb_carbon_server, &gmetad_config, 0},
-      {"carbon_port", ARG_INT, cb_carbon_port, &gmetad_config, 0},
-      {"carbon_protocol", ARG_STR, cb_carbon_protocol, &gmetad_config, 0},
-      {"carbon_timeout", ARG_INT, cb_carbon_timeout, &gmetad_config, 0},
-      {"memcached_parameters", ARG_STR, cb_memcached_parameters, &gmetad_config, 0},
-      {"memcached_include_cluster_in_key", ARG_INT, cb_memcached_include_cluster_in_key, &gmetad_config, 0},
-      {"graphite_prefix", ARG_STR, cb_graphite_prefix, &gmetad_config, 0},
-      {"graphite_path", ARG_STR, cb_graphite_path, &gmetad_config, 0},
-      {"riemann_server", ARG_STR, cb_riemann_server, &gmetad_config, 0},
-      {"riemann_port", ARG_INT, cb_riemann_port, &gmetad_config, 0},
-      {"riemann_protocol", ARG_STR, cb_riemann_protocol, &gmetad_config, 0},
-      {"riemann_attributes", ARG_STR, cb_riemann_attributes, &gmetad_config, 0},
-      {"unsummarized_metrics", ARG_LIST, cb_unsummarized_metrics, &gmetad_config, 0},
-      {"unsummarized_sflow_vm_metrics", ARG_TOGGLE, cb_unsummarized_sflow_vm_metrics, &gmetad_config, 0},
-      {"summarized_metrics", ARG_LIST, cb_summarized_metrics, &gmetad_config, 0},
-      LAST_OPTION
-   };
-
-static void
-set_defaults (gmetad_config_t *config)
-{
-   /* Gmetad defaults */
-   config->gridname = "unspecified";
-   config->xml_port = 8651;
-   config->interactive_port = 8652;
-   config->server_threads = 4;
-   config->umask = 0;
-   config->trusted_hosts = NULL;
-   config->debug_level = 0;
-   config->should_setuid = 1;
-   config->setuid_username = "nobody";
-   config->rrd_rootdir = "/var/lib/ganglia/rrds";
-   config->rrdcached_addrstr = NULL;
-   memset(&config->rrdcached_address, 0, sizeof (config->rrdcached_address));
-   config->write_rrds = 1;
-   config->scalable_mode = 1;
-   config->all_trusted = 0;
-   config->num_RRAs = 3;
-   config->RRAs[0] = "RRA:AVERAGE:0.5:1:5856";
-   config->RRAs[1] = "RRA:AVERAGE:0.5:4:20160";
-   config->RRAs[2] = "RRA:AVERAGE:0.5:40:52704";
-   config->case_sensitive_hostnames = 1;
-   config->carbon_port = 2003;
-   config->carbon_protocol = "tcp";
-   config->carbon_timeout = 500;
-   config->memcached_include_cluster_in_key = 0;
-   config->riemann_port = 5555;
-   config->riemann_protocol = "udp";
-   config->riemann_attributes = NULL;
-   config->unsummarized_metrics = NULL;
-   config->unsummarized_sflow_vm_metrics = 0;
-   config->summarized_metrics = NULL;
-}
-
-int
-parse_config_file ( char *config_file )
-{
-   configfile_t *configfile;
-
-   set_defaults(&gmetad_config);
-
-   configfile = dotconf_create( config_file, gmetad_options, 0, CASE_INSENSITIVE );
-   if (!configfile)
-      {
-         err_quit("Unable to open config file: %s\n", config_file);
-      }
-
-   configfile->errorhandler = (dotconf_errorhandler_t) errorhandler;
-
-   if (dotconf_command_loop(configfile) == 0)
-      {
-         dotconf_cleanup(configfile);
-         err_quit("dotconf_command_loop error");
-      }
-   return 0;
-}
-
-int
-number_of_datasources ( char *config_file )
-{
-   int number_of_sources = 0;
-   char buf[1024];
-   configfile_t *configfile;
-
-   configfile = dotconf_create( config_file, gmetad_options, 0, CASE_INSENSITIVE );
-   if (!configfile) {
-      err_quit("Unable to open config file: %s\n", config_file);
-   }
-
-   while (! dotconf_get_next_line( buf, 1024, configfile ))
-      {
-         if( strstr( buf, "data_source" ) && (buf[0] != '#') )
-            {
-               number_of_sources++;
-            }
-      }
-   dotconf_cleanup(configfile);
-   return number_of_sources;
-}
-
diff -rupN original/ganglia-3.7.1/gmetad-python/Gmetad/gmetad_config.py new/ganglia-3.7.1/gmetad-python/Gmetad/gmetad_config.py
--- original/ganglia-3.7.1/gmetad-python/Gmetad/gmetad_config.py	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/gmetad-python/Gmetad/gmetad_config.py	1970-01-01 05:30:00.000000000 +0530
@@ -1,348 +0,0 @@
-#/*******************************************************************************
-#* Portions Copyright (C) 2008 Novell, Inc. All rights reserved.
-#*
-#* Redistribution and use in source and binary forms, with or without
-#* modification, are permitted provided that the following conditions are met:
-#*
-#*  - Redistributions of source code must retain the above copyright notice,
-#*    this list of conditions and the following disclaimer.
-#*
-#*  - Redistributions in binary form must reproduce the above copyright notice,
-#*    this list of conditions and the following disclaimer in the documentation
-#*    and/or other materials provided with the distribution.
-#*
-#*  - Neither the name of Novell, Inc. nor the names of its
-#*    contributors may be used to endorse or promote products derived from this
-#*    software without specific prior written permission.
-#*
-#* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS''
-#* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-#* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-#* ARE DISCLAIMED. IN NO EVENT SHALL Novell, Inc. OR THE CONTRIBUTORS
-#* BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-#* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-#* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-#* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-#* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-#* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-#* POSSIBILITY OF SUCH DAMAGE.
-#*
-#* Authors: Matt Ryan (mrayn novell.com)
-#*                  Brad Nicholes (bnicholes novell.com)
-#******************************************************************************/
-
-from socket import getfqdn
-import os
-import sys
-import optparse
-
-class GmetadDataSource:
-    def  __init__(self, name, hosts=['localhost'], interval=15):
-        self.name = name
-        self.hosts = hosts
-        self.interval = interval
-        self.time_to_next_read = 0
-
-class GmetadConfig:
-    _shared_state = {}
-    
-    _isInitialized = False
-    
-    DEBUG_LEVEL = 'debug_level'
-    DAEMONIZE = 'daemonize',
-    LOGFILE = 'logfile'
-    PIDFILE = 'pidfile'
-    DATA_SOURCE = 'data_source'
-    RRAS = 'RRAs'
-    SCALABLE = 'scalable'
-    GRIDNAME = 'gridname'
-    AUTHORITY = 'authority'
-    TRUSTED_HOSTS = 'trusted_hosts'
-    ALL_TRUSTED = 'all_trusted'
-    SETUID = 'setuid'
-    SETUID_USERNAME = 'setuid_username'
-    XML_PORT = 'xml_port'
-    INTERACTIVE_PORT = 'interactive_port'
-    SERVER_THREADS = 'server_threads'
-    VERSION = '3.7.1'
-    PLUGINS_DIR = 'plugins_dir'
-    
-    _cfgDefaults = {
-            DEBUG_LEVEL : 2,
-            DAEMONIZE : None,
-            LOGFILE : None,
-            PIDFILE : None,
-            DATA_SOURCE : [],
-            SCALABLE : True,
-            GRIDNAME : 'unspecified',
-            AUTHORITY : 'http://%s/ganglia/' % getfqdn(),
-            TRUSTED_HOSTS : [],
-            ALL_TRUSTED : False,
-            SETUID : True,
-            SETUID_USERNAME : 'nobody',
-            XML_PORT : 8651,
-            INTERACTIVE_PORT : 8652,
-            SERVER_THREADS : 4,
-            PLUGINS_DIR : '/usr/local/lib64/ganglia/python_modules/gmetad/plugins'
-    }
-    
-    
-    def __init__(self, cfgpath=None):
-        self.__dict__ = GmetadConfig._shared_state
-        
-        if cfgpath is not None:
-            self.path = cfgpath
-            self.resetToDefaults()
-            self.sections = {}
-            
-            self.kwHandlers = {
-                GmetadConfig.DEBUG_LEVEL : self.parseDbgLevel,
-                GmetadConfig.DAEMONIZE : self.parseDaemonize,
-                GmetadConfig.LOGFILE : self.parseLogfile,
-                GmetadConfig.DATA_SOURCE : self.parseDataSource,
-                GmetadConfig.SCALABLE : self.parseScalable,
-                GmetadConfig.GRIDNAME : self.parseGridname,
-                GmetadConfig.AUTHORITY : self.parseAuthority,
-                GmetadConfig.TRUSTED_HOSTS : self.parseTrustedHosts,
-                GmetadConfig.ALL_TRUSTED : self.parseAllTrusted,
-                GmetadConfig.SETUID : self.parseSetuid,
-                GmetadConfig.SETUID_USERNAME : self.parseSetuidUsername,
-                GmetadConfig.XML_PORT : self.parseXmlPort,
-                GmetadConfig.INTERACTIVE_PORT : self.parseInteractivePort,
-                GmetadConfig.SERVER_THREADS : self.parseServerThreads,
-                GmetadConfig.PLUGINS_DIR : self.parsePluginsDir
-            }
-            self.updateConfig()
-            GmetadConfig._isInitialized = True
-        
-    def GmetadReadline(self, f):
-        prev_line = None
-        kw = None
-        args = None
-        while 1:
-            line = f.readline()
-            if not line:
-                break
-            if line.startswith('#'): continue
-            if 0 >= len(line.strip()): continue
-            if line.strip().endswith('\\'):
-                if prev_line is None:
-                    prev_line = line.strip().strip('\\')
-                else:
-                    prev_line += line.strip().strip('\\')
-                continue
-            elif prev_line is not None:
-                prev_line += line.strip()
-                line = prev_line
-                prev_line = None
-            try:
-                kw, args = line.strip().split(None,1)
-            except ValueError:
-                kw = line
-                pass
-            break
-        return kw, args
-
-    def updateConfig(self):
-        f = open(self.path, 'r')
-        prev_line = None
-        while 1:
-            kw, args = self.GmetadReadline(f)
-            if kw is None:
-                break
-            if args is None:
-                continue
-            if self.kwHandlers.has_key(kw):
-                self.kwHandlers[kw](args)
-            elif (args.strip().startswith('{')):
-                self._setSection(kw,f)
-                
-    def __setitem__(self, k, v):
-        self.cfg[k] = v
-        
-    def __getitem__(self, k):
-        return self.cfg[k]
-        
-    def getSection(self, id):
-        ret = None
-        secID = id.lower()
-        try:
-            ret = self.sections[secID]
-        except KeyError:
-            pass
-        return ret
-        
-    def _setSection(self, id, f):
-        kw = ''
-        secID = id.lower()
-        self.sections[secID] = []
-        while kw.strip() != '}':
-            kw,args = self.GmetadReadline(f)
-            if kw is None:
-                break
-            if args is None:
-                continue
-            self.sections[secID].append( [kw,args])
-
-
-    def _parseBool(self, arg):
-        v = arg.strip().lower()
-        if v == 'off' or v == 'false' or v == 'no':
-            return False
-        else:
-            return True
-
-    def resetToDefaults(self):
-        self.cfg = GmetadConfig._cfgDefaults
-        
-    def parseDbgLevel(self, level):
-        v = level.strip()
-        if v.isdigit():
-            self.cfg[GmetadConfig.DEBUG_LEVEL] = v
-
-    def parseDaemonize(self, arg):
-        self.cfg[GmetadConfig.DAEMONIZE] = self._parseBool(arg)
-            
-    def parseLogfile(self, logfile):
-        self.cfg[GmetadConfig.LOGFILE] = logfile.strip().strip('"')
-            
-    def parseDataSource(self, args):
-        a = args.split('"')
-        name = a[1]
-        a = a[2].strip().split()
-        if a[0].isdigit():
-            interval = int(a[0])
-            hosts = a[1:]
-        else:
-            interval = 15
-            hosts = a[0:]
-        self.cfg[GmetadConfig.DATA_SOURCE].append(GmetadDataSource(name, hosts, interval))
-        
-    def parseScalable(self, arg):
-        self.cfg[GmetadConfig.SCALABLE] = self._parseBool(arg)
-            
-    def parseGridname(self, arg):
-        self.cfg[GmetadConfig.GRIDNAME] = arg.strip().strip('"')
-        
-    def parseAuthority(self, arg):
-        self.cfg[GmetadConfig.AUTHORITY] = arg.strip().strip('"')
-        
-    def parseTrustedHosts(self, args):
-        if len(args):
-            self.cfg[GmetadConfig.TRUSTED_HOSTS] = args
-            
-    def parseAllTrusted(self, arg):
-        v = arg.strip().lower()
-        if v == 'on' or v == 'true' or v == 'yes':
-            self.cfg[GmetadConfig.ALL_TRUSTED] = True
-        else:
-            self.cfg[GmetadConfig.ALL_TRUSTED] = False
-            
-    def parseSetuid(self, arg):
-        v = arg.strip().lower()
-        if v == 'off' or v == 'false' or v == 'no':
-            self.cfg[GmetadConfig.SETUID] = False
-        else:
-            self.cfg[GmetadConfig.SETUID] = True
-            
-    def parseSetuidUsername(self, arg):
-        self.cfg[GmetadConfig.SETUID_USERNAME] = arg.strip().strip('"')
-        
-    def parseXmlPort(self, arg):
-        v = arg.strip()
-        if v.isdigit():
-            self.cfg[GmetadConfig.XML_PORT] = int(v)
-            
-    def parseInteractivePort(self, arg):
-        v = arg.strip()
-        if v.isdigit():
-            self.cfg[GmetadConfig.INTERACTIVE_PORT] = int(v)
-        
-    def parseServerThreads(self, arg):
-        v = arg.strip()
-        if v.isdigit():
-            self.cfg[GmetadConfig.SERVER_THREADS] = int(v)
-        
-    def parsePluginsDir(self, arg):
-        v = arg.strip().strip('"')
-        if os.path.isdir(v):
-            self.cfg[GmetadConfig.PLUGINS_DIR] = v
-        
-    def parseSection(self, name, fhandle):
-        v = arg.strip().strip('"')
-        if os.path.isdir(v):
-            self.cfg[GmetadConfig.PLUGINS_DIR] = v
-
-def getConfig(args=sys.argv):
-    if GmetadConfig._isInitialized:
-        return GmetadConfig()
-    dbgLevelDefault = GmetadConfig._cfgDefaults[GmetadConfig.DEBUG_LEVEL]
-    iPortDefault = GmetadConfig._cfgDefaults[GmetadConfig.INTERACTIVE_PORT]
-    xPortDefault = GmetadConfig._cfgDefaults[GmetadConfig.XML_PORT]
-    parser = optparse.OptionParser(version = GmetadConfig.VERSION)
-    parser.add_option('-d', '--debug', action='store',
-            help='Debug level. If five (5) or greater, daemon will stay in foreground.  Values are:\n\
-            0 - FATAL\n\
-            1 - CRITICAL\n\
-            2 - ERROR (default)\n\
-            3 - WARNING\n\
-            4 - INFO\n\
-            5 - DEBUG',
-            default='%d' % dbgLevelDefault)
-    parser.add_option('-f', '--foreground', action='store_false',
-            dest="daemonize",
-            help='Run in foreground (don\'t daemonize)',
-            default=None)
-    parser.add_option('-p', '--pid_file', action='store',
-            help='Write process-id to file',
-            default=None)
-    parser.add_option('-c', '--conf', action='store',
-            help='Location of gmetad configuration file (default=\'/etc/ganglia/gmetad-python.conf\')',
-            default='/etc/ganglia/gmetad-python.conf')
-    parser.add_option('-l', '--logfile', action='store',
-            help='Log messages to this path in addition to syslog; overrides configuration',
-            default=None)
-    parser.add_option('-i', '--interactive_port', action='store',
-            help='Interactive port to listen on (default=%d)' % iPortDefault,
-            default='%d' % iPortDefault)
-    parser.add_option('-x', '--xml_port', action='store',
-            help='XML port to listen on (default=%d)' % xPortDefault,
-            default='%d' % xPortDefault)
-            
-    options, arguments = parser.parse_args()
-    
-    if not options.debug.isdigit():
-        print 'Invalid numeric value for --debug: %s' % options.debug
-        parser.print_help()
-        sys.exit()
-    elif not options.interactive_port.isdigit():
-        print 'Invalid numeric value for --interactive_port: %s' % options.interactive_port
-        sys.exit()
-    elif not options.xml_port.isdigit():
-        print 'Invalid numeric value for --xml_port: %s' % options.xml_port
-        sys.exit()
-    elif not os.path.exists(options.conf):
-        print 'No such configuration file: %s' % options.conf
-        parser.print_help()
-        sys.exit()
-        
-    cfg = GmetadConfig(options.conf)
-    
-    # Update configuration if non-default values were provided.
-    if int(dbgLevelDefault) != int(options.debug):
-        cfg[GmetadConfig.DEBUG_LEVEL] = options.debug
-    if options.daemonize is not None:
-        cfg[GmetadConfig.DAEMONIZE] = options.daemonize
-    if cfg[GmetadConfig.DAEMONIZE] is None:
-        cfg[GmetadConfig.DAEMONIZE] = int(cfg[GmetadConfig.DEBUG_LEVEL]) < 5
-    if int(iPortDefault) != int(options.interactive_port):
-        cfg[GmetadConfig.INTERACTIVE_PORT] = options.interactive_port
-    if int(xPortDefault) != int(options.xml_port):
-        cfg[GmetadConfig.XML_PORT] = options.xml_port
-    if options.logfile is not None:
-        cfg[GmetadConfig.LOGFILE] = options.logfile
-    if options.pid_file is not None:
-        cfg[GmetadConfig.PIDFILE] = options.pid_file
-        
-    return cfg
-    
diff -rupN original/ganglia-3.7.1/gmetad-python/gmetad-python.conf new/ganglia-3.7.1/gmetad-python/gmetad-python.conf
--- original/ganglia-3.7.1/gmetad-python/gmetad-python.conf	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/gmetad-python/gmetad-python.conf	1970-01-01 05:30:00.000000000 +0530
@@ -1,129 +0,0 @@
-# This is an example of a Ganglia Meta Daemon configuration file
-#                http://ganglia.sourceforge.net/
-#
-#-------------------------------------------------------------------------------
-# Setting the debug_level to 1 will keep daemon in the forground and
-# show only error messages. Setting this value higher than 1 will make 
-# gmetad output debugging information and stay in the foreground.
-# default: 0
-# debug_level 10
-#
-#-------------------------------------------------------------------------------
-# What to monitor. The most important section of this file. 
-#
-# The data_source tag specifies either a cluster or a grid to
-# monitor. If we detect the source is a cluster, we will maintain a complete
-# set of RRD databases for it, which can be used to create historical 
-# graphs of the metrics. If the source is a grid (it comes from another gmetad),
-# we will only maintain summary RRDs for it.
-#
-# Format: 
-# data_source "my cluster" [polling interval] address1:port addreses2:port ...
-# 
-# The keyword 'data_source' must immediately be followed by a unique
-# string which identifies the source, then an optional polling interval in 
-# seconds. The source will be polled at this interval on average. 
-# If the polling interval is omitted, 15sec is asssumed. 
-#
-# If you choose to set the polling interval to something other than the default,
-# note that the web frontend determines a host as down if its TN value is less
-# than 4 * TMAX (20sec by default).  Therefore, if you set the polling interval
-# to something around or greater than 80sec, this will cause the frontend to
-# incorrectly display hosts as down even though they are not.
-#
-# A list of machines which service the data source follows, in the 
-# format ip:port, or name:port. If a port is not specified then 8649
-# (the default gmond port) is assumed.
-# default: There is no default value
-#
-# data_source "my cluster" 10 localhost  my.machine.edu:8649  1.2.3.5:8655
-# data_source "my grid" 50 1.3.4.7:8655 grid.org:8651 grid-backup.org:8651
-# data_source "another source" 1.3.4.7:8655  1.3.4.8
-
-data_source "my cluster" localhost
-
-#
-#-------------------------------------------------------------------------------
-# Scalability mode. If on, we summarize over downstream grids, and respect
-# authority tags. If off, we take on 2.5.0-era behavior: we do not wrap our output
-# in <GRID></GRID> tags, we ignore all <GRID> tags we see, and always assume
-# we are the "authority" on data source feeds. This approach does not scale to
-# large groups of clusters, but is provided for backwards compatibility.
-# default: on
-# scalable off
-#
-#-------------------------------------------------------------------------------
-# The name of this Grid. All the data sources above will be wrapped in a GRID
-# tag with this name.
-# default: unspecified
-# gridname "MyGrid"
-#
-#-------------------------------------------------------------------------------
-# The authority URL for this grid. Used by other gmetads to locate graphs
-# for our data sources. Generally points to a ganglia/
-# website on this machine.
-# default: "http://hostname/ganglia/",
-#   where hostname is the name of this machine, as defined by gethostname().
-# authority "http://mycluster.org/newprefix/"
-#
-#-------------------------------------------------------------------------------
-# List of machines this gmetad will share XML with. Localhost
-# is always trusted. 
-# default: There is no default value
-# trusted_hosts 127.0.0.1 169.229.50.165 my.gmetad.org
-#
-#-------------------------------------------------------------------------------
-# If you want any host which connects to the gmetad XML to receive
-# data, then set this value to "on"
-# default: off
-# all_trusted on
-#
-#-------------------------------------------------------------------------------
-# If you don't want gmetad to setuid then set this to off
-# default: on
-# setuid off
-#
-#-------------------------------------------------------------------------------
-# User gmetad will setuid to (defaults to "nobody")
-# default: "nobody"
-# setuid_username "nobody"
-#
-#-------------------------------------------------------------------------------
-# The port gmetad will answer requests for XML
-# default: 8651
-# xml_port 8651
-#
-#-------------------------------------------------------------------------------
-# The port gmetad will answer queries for XML. This facility allows
-# simple subtree and summation views of the XML tree.
-# default: 8652
-# interactive_port 8652
-#
-#-------------------------------------------------------------------------------
-# The number of threads answering XML requests
-# default: 4
-# server_threads 10
-#
-
-#-------------------------------------------------------------------------------
-# Where gmetad looks for python plugins
-# default: "/usr/local/lib64/ganglia/python_modules/gmetad"
-plugins_dir /usr/local/lib64/ganglia/python_modules/gmetad
-
-rrd {
-#
-# Round-Robin Archives
-# You can specify custom Round-Robin archives here (defaults are listed below)
-#
-# RRAs "RRA:AVERAGE:0.5:1:244" "RRA:AVERAGE:0.5:24:244" "RRA:AVERAGE:0.5:168:244" "RRA:AVERAGE:0.5:672:244" \
-#      "RRA:AVERAGE:0.5:5760:374"
-#
-
-#-------------------------------------------------------------------------------
-# Where gmetad stores its round-robin databases
-# default: "/var/lib/ganglia/rrds"
-# rrd_rootdir "/some/other/place"
-}
-
-rrdsummary {
-}
diff -rupN original/ganglia-3.7.1/gmetad-python/plugins/rrd_plugin.py new/ganglia-3.7.1/gmetad-python/plugins/rrd_plugin.py
--- original/ganglia-3.7.1/gmetad-python/plugins/rrd_plugin.py	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/gmetad-python/plugins/rrd_plugin.py	1970-01-01 05:30:00.000000000 +0530
@@ -1,215 +0,0 @@
-#/*******************************************************************************
-#* Portions Copyright (C) 2008 Novell, Inc. All rights reserved.
-#*
-#* Redistribution and use in source and binary forms, with or without
-#* modification, are permitted provided that the following conditions are met:
-#*
-#*  - Redistributions of source code must retain the above copyright notice,
-#*    this list of conditions and the following disclaimer.
-#*
-#*  - Redistributions in binary form must reproduce the above copyright notice,
-#*    this list of conditions and the following disclaimer in the documentation
-#*    and/or other materials provided with the distribution.
-#*
-#*  - Neither the name of Novell, Inc. nor the names of its
-#*    contributors may be used to endorse or promote products derived from this
-#*    software without specific prior written permission.
-#*
-#* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS''
-#* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-#* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-#* ARE DISCLAIMED. IN NO EVENT SHALL Novell, Inc. OR THE CONTRIBUTORS
-#* BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-#* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-#* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-#* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-#* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-#* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-#* POSSIBILITY OF SUCH DAMAGE.
-#*
-#* Authors: Matt Ryan (mrayn novell.com)
-#*                  Brad Nicholes (bnicholes novell.com)
-#******************************************************************************/
-
-import os
-import rrdtool
-import logging
-from time import time
-
-from Gmetad.gmetad_plugin import GmetadPlugin
-from Gmetad.gmetad_config import getConfig, GmetadConfig
-
-def get_plugin():
-    ''' All plugins are required to implement this method.  It is used as the factory
-        function that instanciates a new plugin instance. '''
-    # The plugin configuration ID that is passed in must match the section name 
-    #  in the configuration file.
-    return RRDPlugin('rrd')
-
-class RRDPlugin(GmetadPlugin):
-    ''' This class implements the RRD plugin that stores metric data to RRD files.'''
-
-    RRAS = 'RRAs'
-    RRD_ROOTDIR = 'rrd_rootdir'
-
-    # Default RRAs
-    _cfgDefaults = {
-            RRAS : [
-                    'RRA:AVERAGE:0.5:1:244',
-                    'RRA:AVERAGE:0.5:24:244',
-                    'RRA:AVERAGE:0.5:168:244',
-                    'RRA:AVERAGE:0.5:672:244',
-                    'RRA:AVERAGE:0.5:5760:374'
-            ],
-            RRD_ROOTDIR : '/var/lib/ganglia/rrds',
-    }
-
-    def __init__(self, cfgid):
-        self.rrdpath = None
-        self.cfg = None
-        self.kwHandlers = None
-        self._resetConfig()
-        
-        # The call to the parent class __init__ must be last
-        GmetadPlugin.__init__(self, cfgid)
-
-    def _resetConfig(self):
-        self.rrdpath = None
-        self.cfg = RRDPlugin._cfgDefaults
-        
-        self.kwHandlers = {
-            RRDPlugin.RRAS : self._parseRRAs,
-            RRDPlugin.RRD_ROOTDIR : self._parseRrdRootdir
-        }
-    
-    def _parseConfig(self, cfgdata):
-        '''This method overrides the plugin base class method.  It is used to
-            parse the plugin specific configuration directives.'''
-        for kw,args in cfgdata:
-            if self.kwHandlers.has_key(kw):
-                self.kwHandlers[kw](args)
-
-    def _parseRrdRootdir(self, arg):
-        ''' Parse the RRD root directory directive. '''
-        v = arg.strip().strip('"')
-        if os.path.isdir(v):
-            self.cfg[RRDPlugin.RRD_ROOTDIR] = v
-
-    def _parseRRAs(self, args):
-        ''' Parse the RRAs directive. '''
-        self.cfg[RRDPlugin.RRAS] = []
-        for rraspec in args.split():
-            self.cfg[RRDPlugin.RRAS].append(rraspec.strip().strip('"'))
-            
-    def _checkDir(self, dir):
-        ''' This method validates that an RRD directory exists or creates the directory
-            if it doesn't exist. '''
-        if not os.path.isdir(dir):
-            os.mkdir(dir, 0755)
-            
-    def _createRRD(self, clusterNode, metricNode, rrdPath, step, summary):
-        ''' This method creates a new metric RRD file.'''
-        
-        # Determine the RRD data source type.
-        slope = metricNode.getAttr('slope')
-        if slope.lower() == 'positive':
-            dsType = 'COUNTER'
-        else:
-            dsType = 'GAUGE'
-            
-        localTime = clusterNode.getAttr('localtime')
-        if localTime is None:
-            localTime = int(time())
-            
-        # Calculate the heartbeat.
-        heartbeat = 8*step
-        # Format the data source string and add all of the RRDTool arguments to the
-        #  args list.
-        dsString = 'DS:sum:%s:%d:U:U'%(dsType,heartbeat)
-        args = [str(rrdPath), '-b', str(localTime), '-s', str(step), str(dsString)]
-        if summary is True:
-            dsString = 'DS:num:%s:%d:U:U'%(dsType,heartbeat)
-            args.append(str(dsString))
-        for rra in self.cfg[RRDPlugin.RRAS]:
-            args.append(rra)
-        try:
-            # Create the RRD file with the supplied args.
-            rrdtool.create(*args)
-            logging.debug('Created rrd %s'%rrdPath)
-        except Exception, e:
-            logging.info('Error creating rrd %s - %s'%(rrdPath, str(e)))
-        
-    def _updateRRD(self, clusterNode, metricNode, rrdPath, summary):
-        ''' This method updates an RRD file with current metric values. '''
-        # If the node has a time stamp then use it to update the RRD.  Otherwise get
-        #  the current timestamp.
-        processTime = clusterNode.getAttr('localtime')
-        if processTime is None:
-            processTime = int(time())
-        # If this is a summary RRD, format the summary entry.  Otherwise just use a standard entry
-        if summary is True:
-            args = [str(rrdPath), '%s:%s:%s'%(str(processTime),str(metricNode.getAttr('sum')),str(metricNode.getAttr('num')))]
-        else:
-            args = [str(rrdPath), '%s:%s'%(str(processTime),str(metricNode.getAttr('val')))]
-        try:
-            # Update the RRD file with the current timestamp and value
-            rrdtool.update(*args)
-            #logging.debug('Updated rrd %s with value %s'%(rrdPath, str(metricNode.getAttr('val'))))
-        except Exception, e:
-            logging.info('Error updating rrd %s - %s'%(rrdPath, str(e)))
-
-    def start(self):
-        '''Called by the engine during initialization to get the plugin going.'''
-        #print "RRD start called"
-        pass
-    
-    def stop(self):
-        '''Called by the engine during shutdown to allow the plugin to shutdown.'''
-        #print "RRD stop called"
-        pass
-
-    def notify(self, clusterNode):
-        '''Called by the engine when the internal data source has changed.'''
-        # Get the current configuration
-        gmetadConfig = getConfig()
-        # Find the data source configuration entry that matches the cluster name
-        for ds in gmetadConfig[GmetadConfig.DATA_SOURCE]:
-            if ds.name == clusterNode.getAttr('name'):
-                break
-        if ds is None:
-            logging.info('No matching data source for %s'%clusterNode.getAttr('name'))
-            return
-        try:
-            if clusterNode.getAttr('status') == 'down':
-                return
-        except AttributeError:
-            pass
-        # Create the cluster RRD base path and validate it
-        clusterPath = '%s/%s'%(self.cfg[RRDPlugin.RRD_ROOTDIR], clusterNode.getAttr('name'))
-        if 'GRID' == clusterNode.id:
-            clusterPath = '%s/__SummaryInfo__'%clusterPath
-        self._checkDir(clusterPath)
-
-        # We do not want to process grid data
-        if 'GRID' == clusterNode.id:
-            return
-
-        # Update metrics for each host in the cluster
-        for hostNode in clusterNode:
-            # Create the host RRD base path and validate it.
-            hostPath = '%s/%s'%(clusterPath,hostNode.getAttr('name'))
-            self._checkDir(hostPath)
-            # Update metrics for each host
-            for metricNode in hostNode:
-                # Don't update metrics that are numeric values.
-                if metricNode.getAttr('type') in ['string', 'timestamp']:
-                    continue
-                # Create the RRD final path and validate it.
-                rrdPath = '%s/%s.rrd'%(hostPath, metricNode.getAttr('name'))
-                # Create the RRD metric file if it doesn't exist
-                if not os.path.isfile(rrdPath):
-                    self._createRRD(clusterNode, metricNode, rrdPath, ds.interval, False)
-                #need to do some error checking here if the createRRD failed
-                # Update the RRD file.
-                self._updateRRD(clusterNode, metricNode, rrdPath, False)
-        #print "RRD notify called"
diff -rupN original/ganglia-3.7.1/gmetad-python/setup.py new/ganglia-3.7.1/gmetad-python/setup.py
--- original/ganglia-3.7.1/gmetad-python/setup.py	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/gmetad-python/setup.py	1970-01-01 05:30:00.000000000 +0530
@@ -1,32 +0,0 @@
-from distutils.core import setup
-from glob import glob
-
-setup(name='gmetad-python',
-      version='3.7.1',
-      description='Ganglia Meta daemon in Python',
-      maintainer='Ganglia Development Team',
-      maintainer_email='ganglia-developers@lists.sourceforge.net',
-      url='http://ganglia.info',
-      license='BSD',
-      long_description=
-'''Ganglia is a scalable, real-time monitoring and execution environment
-with all execution requests and statistics expressed in an open
-well-defined XML format.
-
-This gmetad daemon aggregates monitoring data from several clusters
-to form a monitoring grid. It also keeps metric history using rrdtool.
-
-gmetad-python is a re-write of the original gmetad code (written in C)
-with pluggable interface.  The RRD files, both the metric RRDs and summary
-RRDs are being written by RRD plugins rather than directly from gmetad.
-This provides the ability to plug in new metric storage modules to support
-other types of storage mechanisms other than RRD and also the ability to
-plug in any type of gmetad-level analysis.''',
-      platforms='Many',
-      packages=['Gmetad'],
-      scripts=['gmetad.py'],
-      data_files=[('/usr/local/etc', ['gmetad-python.conf']),
-                  ('/usr/local/lib64/ganglia/python_modules/gmetad', glob('plugins/*.py')),
-                  ('', ['gmetad-python.service']),
-                  ]
-     )
diff -rupN original/ganglia-3.7.1/gmetric/cmdline.c new/ganglia-3.7.1/gmetric/cmdline.c
--- original/ganglia-3.7.1/gmetric/cmdline.c	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/gmetric/cmdline.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,792 +0,0 @@
-/*
-  File autogenerated by gengetopt version 2.22.4
-  generated with the following command:
-  gengetopt --c-extension=c.in --input ./cmdline.sh 
-
-  The developers of gengetopt consider the fixed text that goes in all
-  gengetopt output files to be in the public domain:
-  we make no copyright claims on it.
-*/
-
-/* If we use autoconf.  */
-#ifdef HAVE_CONFIG_H
-#include "config.h"
-#endif
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-
-#ifndef FIX_UNUSED
-#define FIX_UNUSED(X) (void) (X) /* avoid warnings for unused params */
-#endif
-
-#include <getopt.h>
-
-#include "cmdline.h"
-
-const char *gengetopt_args_info_purpose = "The Ganglia Metric Client (gmetric) announces a metric\non the list of defined send channels defined in a configuration file";
-
-const char *gengetopt_args_info_usage = "Usage: gmetric [OPTIONS]...";
-
-const char *gengetopt_args_info_description = "";
-
-const char *gengetopt_args_info_help[] = {
-  "  -h, --help            Print help and exit",
-  "  -V, --version         Print version and exit",
-  "  -c, --conf=STRING     The configuration file to use for finding send channels \n                           (default=`/usr/local/etc/gmond.conf')",
-  "  -n, --name=STRING     Name of the metric",
-  "  -v, --value=STRING    Value of the metric",
-  "  -t, --type=STRING     Either \n                          string|int8|uint8|int16|uint16|int32|uint32|float|double",
-  "  -u, --units=STRING    Unit of measure for the value e.g. Kilobytes, Celcius  \n                          (default=`')",
-  "  -s, --slope=STRING    Either zero|positive|negative|both|derivative  (default=`both')",
-  "  -x, --tmax=INT        The maximum time in seconds between gmetric calls  \n                          (default=`60')",
-  "  -d, --dmax=INT        The lifetime in seconds of this metric  (default=`0')",
-  "  -g, --group=STRING    Group(s) of the metric (comma-separated)",
-  "  -C, --cluster=STRING  Cluster of the metric",
-  "  -D, --desc=STRING     Description of the metric",
-  "  -T, --title=STRING    Title of the metric",
-  "  -S, --spoof=STRING    IP address and name of host/device (colon separated) we \n                          are spoofing  (default=`')",
-  "  -H, --heartbeat       spoof a heartbeat message (use with spoof option)",
-    0
-};
-
-typedef enum {ARG_NO
-  , ARG_STRING
-  , ARG_INT
-} cmdline_parser_arg_type;
-
-static
-void clear_given (struct gengetopt_args_info *args_info);
-static
-void clear_args (struct gengetopt_args_info *args_info);
-
-static int
-cmdline_parser_internal (int argc, char **argv, struct gengetopt_args_info *args_info,
-                        struct cmdline_parser_params *params, const char *additional_error);
-
-
-static char *
-gengetopt_strdup (const char *s);
-
-static
-void clear_given (struct gengetopt_args_info *args_info)
-{
-  args_info->help_given = 0 ;
-  args_info->version_given = 0 ;
-  args_info->conf_given = 0 ;
-  args_info->name_given = 0 ;
-  args_info->value_given = 0 ;
-  args_info->type_given = 0 ;
-  args_info->units_given = 0 ;
-  args_info->slope_given = 0 ;
-  args_info->tmax_given = 0 ;
-  args_info->dmax_given = 0 ;
-  args_info->group_given = 0 ;
-  args_info->cluster_given = 0 ;
-  args_info->desc_given = 0 ;
-  args_info->title_given = 0 ;
-  args_info->spoof_given = 0 ;
-  args_info->heartbeat_given = 0 ;
-}
-
-static
-void clear_args (struct gengetopt_args_info *args_info)
-{
-  FIX_UNUSED (args_info);
-  args_info->conf_arg = gengetopt_strdup ("/usr/local/etc/gmond.conf");
-  args_info->conf_orig = NULL;
-  args_info->name_arg = NULL;
-  args_info->name_orig = NULL;
-  args_info->value_arg = NULL;
-  args_info->value_orig = NULL;
-  args_info->type_arg = NULL;
-  args_info->type_orig = NULL;
-  args_info->units_arg = gengetopt_strdup ("");
-  args_info->units_orig = NULL;
-  args_info->slope_arg = gengetopt_strdup ("both");
-  args_info->slope_orig = NULL;
-  args_info->tmax_arg = 60;
-  args_info->tmax_orig = NULL;
-  args_info->dmax_arg = 0;
-  args_info->dmax_orig = NULL;
-  args_info->group_arg = NULL;
-  args_info->group_orig = NULL;
-  args_info->cluster_arg = NULL;
-  args_info->cluster_orig = NULL;
-  args_info->desc_arg = NULL;
-  args_info->desc_orig = NULL;
-  args_info->title_arg = NULL;
-  args_info->title_orig = NULL;
-  args_info->spoof_arg = gengetopt_strdup ("");
-  args_info->spoof_orig = NULL;
-  
-}
-
-static
-void init_args_info(struct gengetopt_args_info *args_info)
-{
-
-
-  args_info->help_help = gengetopt_args_info_help[0] ;
-  args_info->version_help = gengetopt_args_info_help[1] ;
-  args_info->conf_help = gengetopt_args_info_help[2] ;
-  args_info->name_help = gengetopt_args_info_help[3] ;
-  args_info->value_help = gengetopt_args_info_help[4] ;
-  args_info->type_help = gengetopt_args_info_help[5] ;
-  args_info->units_help = gengetopt_args_info_help[6] ;
-  args_info->slope_help = gengetopt_args_info_help[7] ;
-  args_info->tmax_help = gengetopt_args_info_help[8] ;
-  args_info->dmax_help = gengetopt_args_info_help[9] ;
-  args_info->group_help = gengetopt_args_info_help[10] ;
-  args_info->cluster_help = gengetopt_args_info_help[11] ;
-  args_info->desc_help = gengetopt_args_info_help[12] ;
-  args_info->title_help = gengetopt_args_info_help[13] ;
-  args_info->spoof_help = gengetopt_args_info_help[14] ;
-  args_info->heartbeat_help = gengetopt_args_info_help[15] ;
-  
-}
-
-void
-cmdline_parser_print_version (void)
-{
-  printf ("%s %s\n",
-     (strlen(CMDLINE_PARSER_PACKAGE_NAME) ? CMDLINE_PARSER_PACKAGE_NAME : CMDLINE_PARSER_PACKAGE),
-     CMDLINE_PARSER_VERSION);
-}
-
-static void print_help_common(void) {
-  cmdline_parser_print_version ();
-
-  if (strlen(gengetopt_args_info_purpose) > 0)
-    printf("\n%s\n", gengetopt_args_info_purpose);
-
-  if (strlen(gengetopt_args_info_usage) > 0)
-    printf("\n%s\n", gengetopt_args_info_usage);
-
-  printf("\n");
-
-  if (strlen(gengetopt_args_info_description) > 0)
-    printf("%s\n\n", gengetopt_args_info_description);
-}
-
-void
-cmdline_parser_print_help (void)
-{
-  int i = 0;
-  print_help_common();
-  while (gengetopt_args_info_help[i])
-    printf("%s\n", gengetopt_args_info_help[i++]);
-}
-
-void
-cmdline_parser_init (struct gengetopt_args_info *args_info)
-{
-  clear_given (args_info);
-  clear_args (args_info);
-  init_args_info (args_info);
-}
-
-void
-cmdline_parser_params_init(struct cmdline_parser_params *params)
-{
-  if (params)
-    { 
-      params->override = 0;
-      params->initialize = 1;
-      params->check_required = 1;
-      params->check_ambiguity = 0;
-      params->print_errors = 1;
-    }
-}
-
-struct cmdline_parser_params *
-cmdline_parser_params_create(void)
-{
-  struct cmdline_parser_params *params = 
-    (struct cmdline_parser_params *)malloc(sizeof(struct cmdline_parser_params));
-  cmdline_parser_params_init(params);  
-  return params;
-}
-
-static void
-free_string_field (char **s)
-{
-  if (*s)
-    {
-      free (*s);
-      *s = 0;
-    }
-}
-
-
-static void
-cmdline_parser_release (struct gengetopt_args_info *args_info)
-{
-
-  free_string_field (&(args_info->conf_arg));
-  free_string_field (&(args_info->conf_orig));
-  free_string_field (&(args_info->name_arg));
-  free_string_field (&(args_info->name_orig));
-  free_string_field (&(args_info->value_arg));
-  free_string_field (&(args_info->value_orig));
-  free_string_field (&(args_info->type_arg));
-  free_string_field (&(args_info->type_orig));
-  free_string_field (&(args_info->units_arg));
-  free_string_field (&(args_info->units_orig));
-  free_string_field (&(args_info->slope_arg));
-  free_string_field (&(args_info->slope_orig));
-  free_string_field (&(args_info->tmax_orig));
-  free_string_field (&(args_info->dmax_orig));
-  free_string_field (&(args_info->group_arg));
-  free_string_field (&(args_info->group_orig));
-  free_string_field (&(args_info->cluster_arg));
-  free_string_field (&(args_info->cluster_orig));
-  free_string_field (&(args_info->desc_arg));
-  free_string_field (&(args_info->desc_orig));
-  free_string_field (&(args_info->title_arg));
-  free_string_field (&(args_info->title_orig));
-  free_string_field (&(args_info->spoof_arg));
-  free_string_field (&(args_info->spoof_orig));
-  
-  
-
-  clear_given (args_info);
-}
-
-
-static void
-write_into_file(FILE *outfile, const char *opt, const char *arg, const char *values[])
-{
-  FIX_UNUSED (values);
-  if (arg) {
-    fprintf(outfile, "%s=\"%s\"\n", opt, arg);
-  } else {
-    fprintf(outfile, "%s\n", opt);
-  }
-}
-
-
-int
-cmdline_parser_dump(FILE *outfile, struct gengetopt_args_info *args_info)
-{
-  int i = 0;
-
-  if (!outfile)
-    {
-      fprintf (stderr, "%s: cannot dump options to stream\n", CMDLINE_PARSER_PACKAGE);
-      return EXIT_FAILURE;
-    }
-
-  if (args_info->help_given)
-    write_into_file(outfile, "help", 0, 0 );
-  if (args_info->version_given)
-    write_into_file(outfile, "version", 0, 0 );
-  if (args_info->conf_given)
-    write_into_file(outfile, "conf", args_info->conf_orig, 0);
-  if (args_info->name_given)
-    write_into_file(outfile, "name", args_info->name_orig, 0);
-  if (args_info->value_given)
-    write_into_file(outfile, "value", args_info->value_orig, 0);
-  if (args_info->type_given)
-    write_into_file(outfile, "type", args_info->type_orig, 0);
-  if (args_info->units_given)
-    write_into_file(outfile, "units", args_info->units_orig, 0);
-  if (args_info->slope_given)
-    write_into_file(outfile, "slope", args_info->slope_orig, 0);
-  if (args_info->tmax_given)
-    write_into_file(outfile, "tmax", args_info->tmax_orig, 0);
-  if (args_info->dmax_given)
-    write_into_file(outfile, "dmax", args_info->dmax_orig, 0);
-  if (args_info->group_given)
-    write_into_file(outfile, "group", args_info->group_orig, 0);
-  if (args_info->cluster_given)
-    write_into_file(outfile, "cluster", args_info->cluster_orig, 0);
-  if (args_info->desc_given)
-    write_into_file(outfile, "desc", args_info->desc_orig, 0);
-  if (args_info->title_given)
-    write_into_file(outfile, "title", args_info->title_orig, 0);
-  if (args_info->spoof_given)
-    write_into_file(outfile, "spoof", args_info->spoof_orig, 0);
-  if (args_info->heartbeat_given)
-    write_into_file(outfile, "heartbeat", 0, 0 );
-  
-
-  i = EXIT_SUCCESS;
-  return i;
-}
-
-int
-cmdline_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
-{
-  FILE *outfile;
-  int i = 0;
-
-  outfile = fopen(filename, "w");
-
-  if (!outfile)
-    {
-      fprintf (stderr, "%s: cannot open file for writing: %s\n", CMDLINE_PARSER_PACKAGE, filename);
-      return EXIT_FAILURE;
-    }
-
-  i = cmdline_parser_dump(outfile, args_info);
-  fclose (outfile);
-
-  return i;
-}
-
-void
-cmdline_parser_free (struct gengetopt_args_info *args_info)
-{
-  cmdline_parser_release (args_info);
-}
-
-/** @brief replacement of strdup, which is not standard */
-char *
-gengetopt_strdup (const char *s)
-{
-  char *result = 0;
-  if (!s)
-    return result;
-
-  result = (char*)malloc(strlen(s) + 1);
-  if (result == (char*)0)
-    return (char*)0;
-  strcpy(result, s);
-  return result;
-}
-
-int
-cmdline_parser (int argc, char **argv, struct gengetopt_args_info *args_info)
-{
-  return cmdline_parser2 (argc, argv, args_info, 0, 1, 1);
-}
-
-int
-cmdline_parser_ext (int argc, char **argv, struct gengetopt_args_info *args_info,
-                   struct cmdline_parser_params *params)
-{
-  int result;
-  result = cmdline_parser_internal (argc, argv, args_info, params, 0);
-
-  if (result == EXIT_FAILURE)
-    {
-      cmdline_parser_free (args_info);
-      exit (EXIT_FAILURE);
-    }
-  
-  return result;
-}
-
-int
-cmdline_parser2 (int argc, char **argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
-{
-  int result;
-  struct cmdline_parser_params params;
-  
-  params.override = override;
-  params.initialize = initialize;
-  params.check_required = check_required;
-  params.check_ambiguity = 0;
-  params.print_errors = 1;
-
-  result = cmdline_parser_internal (argc, argv, args_info, &params, 0);
-
-  if (result == EXIT_FAILURE)
-    {
-      cmdline_parser_free (args_info);
-      exit (EXIT_FAILURE);
-    }
-  
-  return result;
-}
-
-int
-cmdline_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
-{
-  FIX_UNUSED (args_info);
-  FIX_UNUSED (prog_name);
-  return EXIT_SUCCESS;
-}
-
-
-static char *package_name = 0;
-
-/**
- * @brief updates an option
- * @param field the generic pointer to the field to update
- * @param orig_field the pointer to the orig field
- * @param field_given the pointer to the number of occurrence of this option
- * @param prev_given the pointer to the number of occurrence already seen
- * @param value the argument for this option (if null no arg was specified)
- * @param possible_values the possible values for this option (if specified)
- * @param default_value the default value (in case the option only accepts fixed values)
- * @param arg_type the type of this option
- * @param check_ambiguity @see cmdline_parser_params.check_ambiguity
- * @param override @see cmdline_parser_params.override
- * @param no_free whether to free a possible previous value
- * @param multiple_option whether this is a multiple option
- * @param long_opt the corresponding long option
- * @param short_opt the corresponding short option (or '-' if none)
- * @param additional_error possible further error specification
- */
-static
-int update_arg(void *field, char **orig_field,
-               unsigned int *field_given, unsigned int *prev_given, 
-               char *value, const char *possible_values[],
-               const char *default_value,
-               cmdline_parser_arg_type arg_type,
-               int check_ambiguity, int override,
-               int no_free, int multiple_option,
-               const char *long_opt, char short_opt,
-               const char *additional_error)
-{
-  char *stop_char = 0;
-  const char *val = value;
-  int found;
-  char **string_field;
-  FIX_UNUSED (field);
-
-  stop_char = 0;
-  found = 0;
-
-  if (!multiple_option && prev_given && (*prev_given || (check_ambiguity && *field_given)))
-    {
-      if (short_opt != '-')
-        fprintf (stderr, "%s: `--%s' (`-%c') option given more than once%s\n", 
-               package_name, long_opt, short_opt,
-               (additional_error ? additional_error : ""));
-      else
-        fprintf (stderr, "%s: `--%s' option given more than once%s\n", 
-               package_name, long_opt,
-               (additional_error ? additional_error : ""));
-      return 1; /* failure */
-    }
-
-  FIX_UNUSED (default_value);
-    
-  if (field_given && *field_given && ! override)
-    return 0;
-  if (prev_given)
-    (*prev_given)++;
-  if (field_given)
-    (*field_given)++;
-  if (possible_values)
-    val = possible_values[found];
-
-  switch(arg_type) {
-  case ARG_INT:
-    if (val) *((int *)field) = strtol (val, &stop_char, 0);
-    break;
-  case ARG_STRING:
-    if (val) {
-      string_field = (char **)field;
-      if (!no_free && *string_field)
-        free (*string_field); /* free previous string */
-      *string_field = gengetopt_strdup (val);
-    }
-    break;
-  default:
-    break;
-  };
-
-  /* check numeric conversion */
-  switch(arg_type) {
-  case ARG_INT:
-    if (val && !(stop_char && *stop_char == '\0')) {
-      fprintf(stderr, "%s: invalid numeric value: %s\n", package_name, val);
-      return 1; /* failure */
-    }
-    break;
-  default:
-    ;
-  };
-
-  /* store the original value */
-  switch(arg_type) {
-  case ARG_NO:
-    break;
-  default:
-    if (value && orig_field) {
-      if (no_free) {
-        *orig_field = value;
-      } else {
-        if (*orig_field)
-          free (*orig_field); /* free previous string */
-        *orig_field = gengetopt_strdup (value);
-      }
-    }
-  };
-
-  return 0; /* OK */
-}
-
-
-int
-cmdline_parser_internal (
-  int argc, char **argv, struct gengetopt_args_info *args_info,
-                        struct cmdline_parser_params *params, const char *additional_error)
-{
-  int c;	/* Character of the parsed option.  */
-
-  int error = 0;
-  struct gengetopt_args_info local_args_info;
-  
-  int override;
-  int initialize;
-  int check_required;
-  int check_ambiguity;
-  
-  package_name = argv[0];
-  
-  override = params->override;
-  initialize = params->initialize;
-  check_required = params->check_required;
-  check_ambiguity = params->check_ambiguity;
-
-  if (initialize)
-    cmdline_parser_init (args_info);
-
-  cmdline_parser_init (&local_args_info);
-
-  optarg = 0;
-  optind = 0;
-  opterr = params->print_errors;
-  optopt = '?';
-
-  while (1)
-    {
-      int option_index = 0;
-
-      static struct option long_options[] = {
-        { "help",	0, NULL, 'h' },
-        { "version",	0, NULL, 'V' },
-        { "conf",	1, NULL, 'c' },
-        { "name",	1, NULL, 'n' },
-        { "value",	1, NULL, 'v' },
-        { "type",	1, NULL, 't' },
-        { "units",	1, NULL, 'u' },
-        { "slope",	1, NULL, 's' },
-        { "tmax",	1, NULL, 'x' },
-        { "dmax",	1, NULL, 'd' },
-        { "group",	1, NULL, 'g' },
-        { "cluster",	1, NULL, 'C' },
-        { "desc",	1, NULL, 'D' },
-        { "title",	1, NULL, 'T' },
-        { "spoof",	1, NULL, 'S' },
-        { "heartbeat",	0, NULL, 'H' },
-        { 0,  0, 0, 0 }
-      };
-
-      c = getopt_long (argc, argv, "hVc:n:v:t:u:s:x:d:g:C:D:T:S:H", long_options, &option_index);
-
-      if (c == -1) break;	/* Exit from `while (1)' loop.  */
-
-      switch (c)
-        {
-        case 'h':	/* Print help and exit.  */
-          cmdline_parser_print_help ();
-          cmdline_parser_free (&local_args_info);
-          exit (EXIT_SUCCESS);
-
-        case 'V':	/* Print version and exit.  */
-          cmdline_parser_print_version ();
-          cmdline_parser_free (&local_args_info);
-          exit (EXIT_SUCCESS);
-
-        case 'c':	/* The configuration file to use for finding send channels.  */
-        
-        
-          if (update_arg( (void *)&(args_info->conf_arg), 
-               &(args_info->conf_orig), &(args_info->conf_given),
-              &(local_args_info.conf_given), optarg, 0, "/usr/local/etc/gmond.conf", ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "conf", 'c',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'n':	/* Name of the metric.  */
-        
-        
-          if (update_arg( (void *)&(args_info->name_arg), 
-               &(args_info->name_orig), &(args_info->name_given),
-              &(local_args_info.name_given), optarg, 0, 0, ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "name", 'n',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'v':	/* Value of the metric.  */
-        
-        
-          if (update_arg( (void *)&(args_info->value_arg), 
-               &(args_info->value_orig), &(args_info->value_given),
-              &(local_args_info.value_given), optarg, 0, 0, ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "value", 'v',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 't':	/* Either string|int8|uint8|int16|uint16|int32|uint32|float|double.  */
-        
-        
-          if (update_arg( (void *)&(args_info->type_arg), 
-               &(args_info->type_orig), &(args_info->type_given),
-              &(local_args_info.type_given), optarg, 0, 0, ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "type", 't',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'u':	/* Unit of measure for the value e.g. Kilobytes, Celcius.  */
-        
-        
-          if (update_arg( (void *)&(args_info->units_arg), 
-               &(args_info->units_orig), &(args_info->units_given),
-              &(local_args_info.units_given), optarg, 0, "", ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "units", 'u',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 's':	/* Either zero|positive|negative|both.  */
-        
-        
-          if (update_arg( (void *)&(args_info->slope_arg), 
-               &(args_info->slope_orig), &(args_info->slope_given),
-              &(local_args_info.slope_given), optarg, 0, "both", ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "slope", 's',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'x':	/* The maximum time in seconds between gmetric calls.  */
-        
-        
-          if (update_arg( (void *)&(args_info->tmax_arg), 
-               &(args_info->tmax_orig), &(args_info->tmax_given),
-              &(local_args_info.tmax_given), optarg, 0, "60", ARG_INT,
-              check_ambiguity, override, 0, 0,
-              "tmax", 'x',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'd':	/* The lifetime in seconds of this metric.  */
-        
-        
-          if (update_arg( (void *)&(args_info->dmax_arg), 
-               &(args_info->dmax_orig), &(args_info->dmax_given),
-              &(local_args_info.dmax_given), optarg, 0, "0", ARG_INT,
-              check_ambiguity, override, 0, 0,
-              "dmax", 'd',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'g':	/* Group of the metric.  */
-        
-        
-          if (update_arg( (void *)&(args_info->group_arg), 
-               &(args_info->group_orig), &(args_info->group_given),
-              &(local_args_info.group_given), optarg, 0, 0, ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "group", 'g',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'C':	/* Cluster of the metric.  */
-        
-        
-          if (update_arg( (void *)&(args_info->cluster_arg), 
-               &(args_info->cluster_orig), &(args_info->cluster_given),
-              &(local_args_info.cluster_given), optarg, 0, 0, ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "cluster", 'C',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'D':	/* Description of the metric.  */
-        
-        
-          if (update_arg( (void *)&(args_info->desc_arg), 
-               &(args_info->desc_orig), &(args_info->desc_given),
-              &(local_args_info.desc_given), optarg, 0, 0, ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "desc", 'D',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'T':	/* Title of the metric.  */
-        
-        
-          if (update_arg( (void *)&(args_info->title_arg), 
-               &(args_info->title_orig), &(args_info->title_given),
-              &(local_args_info.title_given), optarg, 0, 0, ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "title", 'T',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'S':	/* IP address and name of host/device (colon separated) we are spoofing.  */
-        
-        
-          if (update_arg( (void *)&(args_info->spoof_arg), 
-               &(args_info->spoof_orig), &(args_info->spoof_given),
-              &(local_args_info.spoof_given), optarg, 0, "", ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "spoof", 'S',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'H':	/* spoof a heartbeat message (use with spoof option).  */
-        
-        
-          if (update_arg( 0 , 
-               0 , &(args_info->heartbeat_given),
-              &(local_args_info.heartbeat_given), optarg, 0, 0, ARG_NO,
-              check_ambiguity, override, 0, 0,
-              "heartbeat", 'H',
-              additional_error))
-            goto failure;
-        
-          break;
-
-        case 0:	/* Long option with no short option */
-        case '?':	/* Invalid option.  */
-          /* `getopt_long' already printed an error message.  */
-          goto failure;
-
-        default:	/* bug: option not considered.  */
-          fprintf (stderr, "%s: option unknown: %c%s\n", CMDLINE_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
-          abort ();
-        } /* switch */
-    } /* while */
-
-
-
-
-  cmdline_parser_release (&local_args_info);
-
-  if ( error )
-    return (EXIT_FAILURE);
-
-  return 0;
-
-failure:
-  
-  cmdline_parser_release (&local_args_info);
-  return (EXIT_FAILURE);
-}
diff -rupN original/ganglia-3.7.1/gmond/Makefile.am new/ganglia-3.7.1/gmond/Makefile.am
--- original/ganglia-3.7.1/gmond/Makefile.am	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/gmond/Makefile.am	2015-09-03 10:31:29.957064000 +0530
@@ -6,6 +6,20 @@ if BUILD_PERL
 SUBDIRS += perl_modules
 endif
 
+
+bst_app_DIR = ./bst_app
+bst_app_SOURCES = $(bst_app_DIR)/bstapp_cache.c  \
+                  $(bst_app_DIR)/bstapp_http.h   \
+                  $(bst_app_DIR)/bstapp_server.c \
+                  $(bst_app_DIR)/bstapp_server.h \
+                  $(bst_app_DIR)/bstapp_table.h  \
+                  $(bst_app_DIR)/cJSON.h         \
+                  $(bst_app_DIR)/bstapp_cache.h  \
+                  $(bst_app_DIR)/bstapp_map.h    \
+                  $(bst_app_DIR)/bstapp_server_debug.h \
+                  $(bst_app_DIR)/bstapp_table.c \
+                  $(bst_app_DIR)/cJSON.c
+
 EXTRA_DIST = gmond.aix.init
 EXTRA_DIST += gmond.solaris.init.in
 EXTRA_DIST += gmond.init
@@ -23,6 +37,7 @@ endif
 GLDADD = modules/disk/mod_disk.lo
 GLDADD += modules/cpu/mod_cpu.lo
 GLDADD += modules/cpu/mod_load.lo
+GLDADD += modules/bst/mod_bst.lo
 GLDADD += modules/memory/mod_mem.lo
 GLDADD += modules/network/mod_net.lo
 GLDADD += modules/system/mod_proc.lo
@@ -57,6 +72,10 @@ gmond_SOURCES = gmond.c cmdline.c.in cmd
 if BUILD_SFLOW
 gmond_SOURCES += sflow.h sflow.c sflow_gmetric.h
 endif
+
+gmond_SOURCES += $(bst_app_SOURCES)
+
+
 dist_man_MANS  = gmond.conf.5
 
 gmond.conf.5: conf.pod gmond.conf.html
diff -rupN original/ganglia-3.7.1/gmond/Makefile.in new/ganglia-3.7.1/gmond/Makefile.in
--- original/ganglia-3.7.1/gmond/Makefile.in	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/gmond/Makefile.in	2015-09-03 10:31:29.959078000 +0530
@@ -34,6 +34,25 @@ am__make_dryrun = \
     esac; \
     test $$am__dry = yes; \
   }
+
+bst_app_DIR = ./bst_app
+bst_app_SOURCES = $(bst_app_DIR)/bstapp_cache.c  \
+                  $(bst_app_DIR)/bstapp_http.h   \
+                  $(bst_app_DIR)/bstapp_server.c \
+                  $(bst_app_DIR)/bstapp_server.h \
+                  $(bst_app_DIR)/bstapp_table.h  \
+                  $(bst_app_DIR)/cJSON.h         \
+                  $(bst_app_DIR)/bstapp_cache.h  \
+                  $(bst_app_DIR)/bstapp_map.h    \
+                  $(bst_app_DIR)/bstapp_server_debug.h \
+                  $(bst_app_DIR)/bstapp_table.c \
+                  $(bst_app_DIR)/cJSON.c
+
+bst_app_OBJECTS = $(bst_app_DIR)/bstapp_cache.$(OBJEXT)  \
+                  $(bst_app_DIR)/bstapp_server.$(OBJEXT) \
+                  $(bst_app_DIR)/bstapp_table.$(OBJEXT) \
+                  $(bst_app_DIR)/cJSON.$(OBJEXT)
+
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -60,6 +79,8 @@ DIST_COMMON = $(dist_man_MANS) $(srcdir)
 @BUILD_SFLOW_TRUE@am__append_4 = -DSFLOW
 sbin_PROGRAMS = gmond$(EXEEXT)
 @BUILD_SFLOW_TRUE@am__append_5 = sflow.h sflow.c sflow_gmetric.h
+am_append_6 = $(bst_app_SOURCES)
+
 subdir = gmond
 ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
@@ -75,10 +96,14 @@ am__installdirs = "$(DESTDIR)$(sbindir)"
 PROGRAMS = $(sbin_PROGRAMS)
 am__gmond_SOURCES_DIST = gmond.c cmdline.c.in cmdline.c cmdline.h \
 	dtd.h g25_config.c core_metrics.c g25_config.h \
-	gmond_internal.h sflow.h sflow.c sflow_gmetric.h
+	gmond_internal.h sflow.h sflow.c sflow_gmetric.h $(am_append_6)
+
 @BUILD_SFLOW_TRUE@am__objects_1 = sflow.$(OBJEXT)
+
+am__objects_2 = $(bst_app_OBJECTS)
+
 am_gmond_OBJECTS = gmond.$(OBJEXT) cmdline.$(OBJEXT) \
-	g25_config.$(OBJEXT) core_metrics.$(OBJEXT) $(am__objects_1)
+	g25_config.$(OBJEXT) core_metrics.$(OBJEXT) $(am__objects_1) $(am__objects_2)
 gmond_OBJECTS = $(am_gmond_OBJECTS)
 @STATIC_BUILD_TRUE@am__DEPENDENCIES_1 = modules/disk/mod_disk.lo \
 @STATIC_BUILD_TRUE@	modules/cpu/mod_cpu.lo \
@@ -87,6 +112,7 @@ gmond_OBJECTS = $(am_gmond_OBJECTS)
 @STATIC_BUILD_TRUE@	modules/network/mod_net.lo \
 @STATIC_BUILD_TRUE@	modules/system/mod_proc.lo \
 @STATIC_BUILD_TRUE@	modules/system/mod_sys.lo \
+@STATIC_BUILD_TRUE@	modules/bst/mod_bst.lo \
 @STATIC_BUILD_TRUE@	modules/cpu/mod_multicpu.lo $(MOD_GSTATUS) \
 @STATIC_BUILD_TRUE@	$(am__append_2)
 gmond_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
@@ -354,6 +380,7 @@ EXTRA_DIST = gmond.aix.init gmond.solari
 @STATIC_BUILD_TRUE@	modules/network/mod_net.lo \
 @STATIC_BUILD_TRUE@	modules/system/mod_proc.lo \
 @STATIC_BUILD_TRUE@	modules/system/mod_sys.lo \
+@STATIC_BUILD_TRUE@	modules/bst/mod_bst.lo \
 @STATIC_BUILD_TRUE@	modules/cpu/mod_multicpu.lo $(MOD_GSTATUS) \
 @STATIC_BUILD_TRUE@	@STATIC_USER_MODULES@ $(am__append_2)
 @STATIC_BUILD_FALSE@GLDFLAGS = @EXPORT_SYMBOLS_DYNAMIC@
@@ -364,7 +391,7 @@ AM_CFLAGS = -I$(top_builddir)/lib -I$(to
 # metric.h and dtd.h are for gmetad/gmetric for now....
 gmond_SOURCES = gmond.c cmdline.c.in cmdline.c cmdline.h dtd.h \
 	g25_config.c core_metrics.c g25_config.h gmond_internal.h \
-	$(am__append_5)
+	$(am__append_5) $(am_append_6)
 dist_man_MANS = gmond.conf.5
 
 #monitor.c server.c listen.c cleanup.c \
@@ -477,6 +504,10 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/g25_config.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gmond.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sflow.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cJSON.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bst_app/bstapp_table.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bst_app/bstapp_cache.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bst_app/bstapp_server.Po@am__quote@
 
 .c.o:
 @am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
diff -rupN original/ganglia-3.7.1/gmond/cmdline.c new/ganglia-3.7.1/gmond/cmdline.c
--- original/ganglia-3.7.1/gmond/cmdline.c	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/gmond/cmdline.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,672 +0,0 @@
-/*
-  File autogenerated by gengetopt version 2.22.4
-  generated with the following command:
-  gengetopt --c-extension=c.in --input ./cmdline.sh 
-
-  The developers of gengetopt consider the fixed text that goes in all
-  gengetopt output files to be in the public domain:
-  we make no copyright claims on it.
-*/
-
-/* If we use autoconf.  */
-#ifdef HAVE_CONFIG_H
-#include "config.h"
-#endif
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-
-#ifndef FIX_UNUSED
-#define FIX_UNUSED(X) (void) (X) /* avoid warnings for unused params */
-#endif
-
-#include <getopt.h>
-
-#include "cmdline.h"
-
-const char *gengetopt_args_info_purpose = "The Ganglia Monitoring Daemon (gmond) listens to the cluster\nmessage channel, stores the data in-memory and when requested\nwill output an XML description of the state of the cluster";
-
-const char *gengetopt_args_info_usage = "Usage: gmond [OPTIONS]...";
-
-const char *gengetopt_args_info_description = "";
-
-const char *gengetopt_args_info_help[] = {
-  "  -h, --help             Print help and exit",
-  "  -V, --version          Print version and exit",
-  "  -c, --conf=STRING      Location of gmond configuration file  \n                           (default=`/usr/local/etc/gmond.conf')",
-  "  -l, --location=STRING  Location of this host in the cluster \n                           'rack,rank,plane'.  (default=`0,0,0')",
-  "  -d, --debug=INT        Debug level. If greater than zero, daemon will stay in \n                           foreground.  (default=`0')",
-  "  -f, --foreground       Run in foreground (don't daemonize)  (default=off)",
-  "  -t, --default_config   Print the default configuration to stdout and exit  \n                           (default=off)",
-  "  -m, --metrics          Print the list of metrics this gmond supports  \n                           (default=off)",
-  "  -b, --bandwidth        Calculate minimum bandwidth use for configuration  \n                           (default=off)",
-  "  -r, --convert=STRING   Convert a 2.5.x configuration file to the new 3.x \n                           format",
-  "  -p, --pid-file=STRING  Write process-id to file",
-    0
-};
-
-typedef enum {ARG_NO
-  , ARG_FLAG
-  , ARG_STRING
-  , ARG_INT
-} cmdline_parser_arg_type;
-
-static
-void clear_given (struct gengetopt_args_info *args_info);
-static
-void clear_args (struct gengetopt_args_info *args_info);
-
-static int
-cmdline_parser_internal (int argc, char **argv, struct gengetopt_args_info *args_info,
-                        struct cmdline_parser_params *params, const char *additional_error);
-
-
-static char *
-gengetopt_strdup (const char *s);
-
-static
-void clear_given (struct gengetopt_args_info *args_info)
-{
-  args_info->help_given = 0 ;
-  args_info->version_given = 0 ;
-  args_info->conf_given = 0 ;
-  args_info->location_given = 0 ;
-  args_info->debug_given = 0 ;
-  args_info->foreground_given = 0 ;
-  args_info->default_config_given = 0 ;
-  args_info->metrics_given = 0 ;
-  args_info->bandwidth_given = 0 ;
-  args_info->convert_given = 0 ;
-  args_info->pid_file_given = 0 ;
-}
-
-static
-void clear_args (struct gengetopt_args_info *args_info)
-{
-  FIX_UNUSED (args_info);
-  args_info->conf_arg = gengetopt_strdup ("/usr/local/etc/gmond.conf");
-  args_info->conf_orig = NULL;
-  args_info->location_arg = gengetopt_strdup ("0,0,0");
-  args_info->location_orig = NULL;
-  args_info->debug_arg = 0;
-  args_info->debug_orig = NULL;
-  args_info->foreground_flag = 0;
-  args_info->default_config_flag = 0;
-  args_info->metrics_flag = 0;
-  args_info->bandwidth_flag = 0;
-  args_info->convert_arg = NULL;
-  args_info->convert_orig = NULL;
-  args_info->pid_file_arg = NULL;
-  args_info->pid_file_orig = NULL;
-  
-}
-
-static
-void init_args_info(struct gengetopt_args_info *args_info)
-{
-
-
-  args_info->help_help = gengetopt_args_info_help[0] ;
-  args_info->version_help = gengetopt_args_info_help[1] ;
-  args_info->conf_help = gengetopt_args_info_help[2] ;
-  args_info->location_help = gengetopt_args_info_help[3] ;
-  args_info->debug_help = gengetopt_args_info_help[4] ;
-  args_info->foreground_help = gengetopt_args_info_help[5] ;
-  args_info->default_config_help = gengetopt_args_info_help[6] ;
-  args_info->metrics_help = gengetopt_args_info_help[7] ;
-  args_info->bandwidth_help = gengetopt_args_info_help[8] ;
-  args_info->convert_help = gengetopt_args_info_help[9] ;
-  args_info->pid_file_help = gengetopt_args_info_help[10] ;
-  
-}
-
-void
-cmdline_parser_print_version (void)
-{
-  printf ("%s %s\n",
-     (strlen(CMDLINE_PARSER_PACKAGE_NAME) ? CMDLINE_PARSER_PACKAGE_NAME : CMDLINE_PARSER_PACKAGE),
-     CMDLINE_PARSER_VERSION);
-}
-
-static void print_help_common(void) {
-  cmdline_parser_print_version ();
-
-  if (strlen(gengetopt_args_info_purpose) > 0)
-    printf("\n%s\n", gengetopt_args_info_purpose);
-
-  if (strlen(gengetopt_args_info_usage) > 0)
-    printf("\n%s\n", gengetopt_args_info_usage);
-
-  printf("\n");
-
-  if (strlen(gengetopt_args_info_description) > 0)
-    printf("%s\n\n", gengetopt_args_info_description);
-}
-
-void
-cmdline_parser_print_help (void)
-{
-  int i = 0;
-  print_help_common();
-  while (gengetopt_args_info_help[i])
-    printf("%s\n", gengetopt_args_info_help[i++]);
-}
-
-void
-cmdline_parser_init (struct gengetopt_args_info *args_info)
-{
-  clear_given (args_info);
-  clear_args (args_info);
-  init_args_info (args_info);
-}
-
-void
-cmdline_parser_params_init(struct cmdline_parser_params *params)
-{
-  if (params)
-    { 
-      params->override = 0;
-      params->initialize = 1;
-      params->check_required = 1;
-      params->check_ambiguity = 0;
-      params->print_errors = 1;
-    }
-}
-
-struct cmdline_parser_params *
-cmdline_parser_params_create(void)
-{
-  struct cmdline_parser_params *params = 
-    (struct cmdline_parser_params *)malloc(sizeof(struct cmdline_parser_params));
-  cmdline_parser_params_init(params);  
-  return params;
-}
-
-static void
-free_string_field (char **s)
-{
-  if (*s)
-    {
-      free (*s);
-      *s = 0;
-    }
-}
-
-
-static void
-cmdline_parser_release (struct gengetopt_args_info *args_info)
-{
-
-  free_string_field (&(args_info->conf_arg));
-  free_string_field (&(args_info->conf_orig));
-  free_string_field (&(args_info->location_arg));
-  free_string_field (&(args_info->location_orig));
-  free_string_field (&(args_info->debug_orig));
-  free_string_field (&(args_info->convert_arg));
-  free_string_field (&(args_info->convert_orig));
-  free_string_field (&(args_info->pid_file_arg));
-  free_string_field (&(args_info->pid_file_orig));
-  
-  
-
-  clear_given (args_info);
-}
-
-
-static void
-write_into_file(FILE *outfile, const char *opt, const char *arg, const char *values[])
-{
-  FIX_UNUSED (values);
-  if (arg) {
-    fprintf(outfile, "%s=\"%s\"\n", opt, arg);
-  } else {
-    fprintf(outfile, "%s\n", opt);
-  }
-}
-
-
-int
-cmdline_parser_dump(FILE *outfile, struct gengetopt_args_info *args_info)
-{
-  int i = 0;
-
-  if (!outfile)
-    {
-      fprintf (stderr, "%s: cannot dump options to stream\n", CMDLINE_PARSER_PACKAGE);
-      return EXIT_FAILURE;
-    }
-
-  if (args_info->help_given)
-    write_into_file(outfile, "help", 0, 0 );
-  if (args_info->version_given)
-    write_into_file(outfile, "version", 0, 0 );
-  if (args_info->conf_given)
-    write_into_file(outfile, "conf", args_info->conf_orig, 0);
-  if (args_info->location_given)
-    write_into_file(outfile, "location", args_info->location_orig, 0);
-  if (args_info->debug_given)
-    write_into_file(outfile, "debug", args_info->debug_orig, 0);
-  if (args_info->foreground_given)
-    write_into_file(outfile, "foreground", 0, 0 );
-  if (args_info->default_config_given)
-    write_into_file(outfile, "default_config", 0, 0 );
-  if (args_info->metrics_given)
-    write_into_file(outfile, "metrics", 0, 0 );
-  if (args_info->bandwidth_given)
-    write_into_file(outfile, "bandwidth", 0, 0 );
-  if (args_info->convert_given)
-    write_into_file(outfile, "convert", args_info->convert_orig, 0);
-  if (args_info->pid_file_given)
-    write_into_file(outfile, "pid-file", args_info->pid_file_orig, 0);
-  
-
-  i = EXIT_SUCCESS;
-  return i;
-}
-
-int
-cmdline_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
-{
-  FILE *outfile;
-  int i = 0;
-
-  outfile = fopen(filename, "w");
-
-  if (!outfile)
-    {
-      fprintf (stderr, "%s: cannot open file for writing: %s\n", CMDLINE_PARSER_PACKAGE, filename);
-      return EXIT_FAILURE;
-    }
-
-  i = cmdline_parser_dump(outfile, args_info);
-  fclose (outfile);
-
-  return i;
-}
-
-void
-cmdline_parser_free (struct gengetopt_args_info *args_info)
-{
-  cmdline_parser_release (args_info);
-}
-
-/** @brief replacement of strdup, which is not standard */
-char *
-gengetopt_strdup (const char *s)
-{
-  char *result = 0;
-  if (!s)
-    return result;
-
-  result = (char*)malloc(strlen(s) + 1);
-  if (result == (char*)0)
-    return (char*)0;
-  strcpy(result, s);
-  return result;
-}
-
-int
-cmdline_parser (int argc, char **argv, struct gengetopt_args_info *args_info)
-{
-  return cmdline_parser2 (argc, argv, args_info, 0, 1, 1);
-}
-
-int
-cmdline_parser_ext (int argc, char **argv, struct gengetopt_args_info *args_info,
-                   struct cmdline_parser_params *params)
-{
-  int result;
-  result = cmdline_parser_internal (argc, argv, args_info, params, 0);
-
-  if (result == EXIT_FAILURE)
-    {
-      cmdline_parser_free (args_info);
-      exit (EXIT_FAILURE);
-    }
-  
-  return result;
-}
-
-int
-cmdline_parser2 (int argc, char **argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
-{
-  int result;
-  struct cmdline_parser_params params;
-  
-  params.override = override;
-  params.initialize = initialize;
-  params.check_required = check_required;
-  params.check_ambiguity = 0;
-  params.print_errors = 1;
-
-  result = cmdline_parser_internal (argc, argv, args_info, &params, 0);
-
-  if (result == EXIT_FAILURE)
-    {
-      cmdline_parser_free (args_info);
-      exit (EXIT_FAILURE);
-    }
-  
-  return result;
-}
-
-int
-cmdline_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
-{
-  FIX_UNUSED (args_info);
-  FIX_UNUSED (prog_name);
-  return EXIT_SUCCESS;
-}
-
-
-static char *package_name = 0;
-
-/**
- * @brief updates an option
- * @param field the generic pointer to the field to update
- * @param orig_field the pointer to the orig field
- * @param field_given the pointer to the number of occurrence of this option
- * @param prev_given the pointer to the number of occurrence already seen
- * @param value the argument for this option (if null no arg was specified)
- * @param possible_values the possible values for this option (if specified)
- * @param default_value the default value (in case the option only accepts fixed values)
- * @param arg_type the type of this option
- * @param check_ambiguity @see cmdline_parser_params.check_ambiguity
- * @param override @see cmdline_parser_params.override
- * @param no_free whether to free a possible previous value
- * @param multiple_option whether this is a multiple option
- * @param long_opt the corresponding long option
- * @param short_opt the corresponding short option (or '-' if none)
- * @param additional_error possible further error specification
- */
-static
-int update_arg(void *field, char **orig_field,
-               unsigned int *field_given, unsigned int *prev_given, 
-               char *value, const char *possible_values[],
-               const char *default_value,
-               cmdline_parser_arg_type arg_type,
-               int check_ambiguity, int override,
-               int no_free, int multiple_option,
-               const char *long_opt, char short_opt,
-               const char *additional_error)
-{
-  char *stop_char = 0;
-  const char *val = value;
-  int found;
-  char **string_field;
-  FIX_UNUSED (field);
-
-  stop_char = 0;
-  found = 0;
-
-  if (!multiple_option && prev_given && (*prev_given || (check_ambiguity && *field_given)))
-    {
-      if (short_opt != '-')
-        fprintf (stderr, "%s: `--%s' (`-%c') option given more than once%s\n", 
-               package_name, long_opt, short_opt,
-               (additional_error ? additional_error : ""));
-      else
-        fprintf (stderr, "%s: `--%s' option given more than once%s\n", 
-               package_name, long_opt,
-               (additional_error ? additional_error : ""));
-      return 1; /* failure */
-    }
-
-  FIX_UNUSED (default_value);
-    
-  if (field_given && *field_given && ! override)
-    return 0;
-  if (prev_given)
-    (*prev_given)++;
-  if (field_given)
-    (*field_given)++;
-  if (possible_values)
-    val = possible_values[found];
-
-  switch(arg_type) {
-  case ARG_FLAG:
-    *((int *)field) = !*((int *)field);
-    break;
-  case ARG_INT:
-    if (val) *((int *)field) = strtol (val, &stop_char, 0);
-    break;
-  case ARG_STRING:
-    if (val) {
-      string_field = (char **)field;
-      if (!no_free && *string_field)
-        free (*string_field); /* free previous string */
-      *string_field = gengetopt_strdup (val);
-    }
-    break;
-  default:
-    break;
-  };
-
-  /* check numeric conversion */
-  switch(arg_type) {
-  case ARG_INT:
-    if (val && !(stop_char && *stop_char == '\0')) {
-      fprintf(stderr, "%s: invalid numeric value: %s\n", package_name, val);
-      return 1; /* failure */
-    }
-    break;
-  default:
-    ;
-  };
-
-  /* store the original value */
-  switch(arg_type) {
-  case ARG_NO:
-  case ARG_FLAG:
-    break;
-  default:
-    if (value && orig_field) {
-      if (no_free) {
-        *orig_field = value;
-      } else {
-        if (*orig_field)
-          free (*orig_field); /* free previous string */
-        *orig_field = gengetopt_strdup (value);
-      }
-    }
-  };
-
-  return 0; /* OK */
-}
-
-
-int
-cmdline_parser_internal (
-  int argc, char **argv, struct gengetopt_args_info *args_info,
-                        struct cmdline_parser_params *params, const char *additional_error)
-{
-  int c;	/* Character of the parsed option.  */
-
-  int error = 0;
-  struct gengetopt_args_info local_args_info;
-  
-  int override;
-  int initialize;
-  int check_required;
-  int check_ambiguity;
-  
-  package_name = argv[0];
-  
-  override = params->override;
-  initialize = params->initialize;
-  check_required = params->check_required;
-  check_ambiguity = params->check_ambiguity;
-
-  if (initialize)
-    cmdline_parser_init (args_info);
-
-  cmdline_parser_init (&local_args_info);
-
-  optarg = 0;
-  optind = 0;
-  opterr = params->print_errors;
-  optopt = '?';
-
-  while (1)
-    {
-      int option_index = 0;
-
-      static struct option long_options[] = {
-        { "help",	0, NULL, 'h' },
-        { "version",	0, NULL, 'V' },
-        { "conf",	1, NULL, 'c' },
-        { "location",	1, NULL, 'l' },
-        { "debug",	1, NULL, 'd' },
-        { "foreground",	0, NULL, 'f' },
-        { "default_config",	0, NULL, 't' },
-        { "metrics",	0, NULL, 'm' },
-        { "bandwidth",	0, NULL, 'b' },
-        { "convert",	1, NULL, 'r' },
-        { "pid-file",	1, NULL, 'p' },
-        { 0,  0, 0, 0 }
-      };
-
-      c = getopt_long (argc, argv, "hVc:l:d:ftmbr:p:z", long_options, &option_index);
-
-      if (c == -1) break;	/* Exit from `while (1)' loop.  */
-
-      switch (c)
-        {
-        case 'h':	/* Print help and exit.  */
-          cmdline_parser_print_help ();
-          cmdline_parser_free (&local_args_info);
-          exit (EXIT_SUCCESS);
-
-        case 'V':	/* Print version and exit.  */
-          cmdline_parser_print_version ();
-          cmdline_parser_free (&local_args_info);
-          exit (EXIT_SUCCESS);
-
-        case 'c':	/* Location of gmond configuration file.  */
-        
-        
-          if (update_arg( (void *)&(args_info->conf_arg), 
-               &(args_info->conf_orig), &(args_info->conf_given),
-              &(local_args_info.conf_given), optarg, 0, "/usr/local/etc/gmond.conf", ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "conf", 'c',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'l':	/* Location of this host in the cluster 'rack,rank,plane'..  */
-        
-        
-          if (update_arg( (void *)&(args_info->location_arg), 
-               &(args_info->location_orig), &(args_info->location_given),
-              &(local_args_info.location_given), optarg, 0, "0,0,0", ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "location", 'l',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'd':	/* Debug level. If greater than zero, daemon will stay in foreground..  */
-        
-        
-          if (update_arg( (void *)&(args_info->debug_arg), 
-               &(args_info->debug_orig), &(args_info->debug_given),
-              &(local_args_info.debug_given), optarg, 0, "0", ARG_INT,
-              check_ambiguity, override, 0, 0,
-              "debug", 'd',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'f':	/* Run in foreground (don't daemonize).  */
-        
-        
-          if (update_arg((void *)&(args_info->foreground_flag), 0, &(args_info->foreground_given),
-              &(local_args_info.foreground_given), optarg, 0, 0, ARG_FLAG,
-              check_ambiguity, override, 1, 0, "foreground", 'f',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 't':	/* Print the default configuration to stdout and exit.  */
-        
-        
-          if (update_arg((void *)&(args_info->default_config_flag), 0, &(args_info->default_config_given),
-              &(local_args_info.default_config_given), optarg, 0, 0, ARG_FLAG,
-              check_ambiguity, override, 1, 0, "default_config", 't',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'm':	/* Print the list of metrics this gmond supports.  */
-        
-        
-          if (update_arg((void *)&(args_info->metrics_flag), 0, &(args_info->metrics_given),
-              &(local_args_info.metrics_given), optarg, 0, 0, ARG_FLAG,
-              check_ambiguity, override, 1, 0, "metrics", 'm',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'b':	/* Calculate minimum bandwidth use for configuration.  */
-        
-        
-          if (update_arg((void *)&(args_info->bandwidth_flag), 0, &(args_info->bandwidth_given),
-              &(local_args_info.bandwidth_given), optarg, 0, 0, ARG_FLAG,
-              check_ambiguity, override, 1, 0, "bandwidth", 'b',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'r':	/* Convert a 2.5.x configuration file to the new 3.x format.  */
-        
-        
-          if (update_arg( (void *)&(args_info->convert_arg), 
-               &(args_info->convert_orig), &(args_info->convert_given),
-              &(local_args_info.convert_given), optarg, 0, 0, ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "convert", 'r',
-              additional_error))
-            goto failure;
-        
-          break;
-        case 'p':	/* Write process-id to file.  */
-        
-        
-          if (update_arg( (void *)&(args_info->pid_file_arg), 
-               &(args_info->pid_file_orig), &(args_info->pid_file_given),
-              &(local_args_info.pid_file_given), optarg, 0, 0, ARG_STRING,
-              check_ambiguity, override, 0, 0,
-              "pid-file", 'p',
-              additional_error))
-            goto failure;
-        
-          break;
-
-        case 0:	/* Long option with no short option */
-        case '?':	/* Invalid option.  */
-          /* `getopt_long' already printed an error message.  */
-          goto failure;
-
-        default:	/* bug: option not considered.  */
-          fprintf (stderr, "%s: option unknown: %c%s\n", CMDLINE_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
-          abort ();
-        } /* switch */
-    } /* while */
-
-
-
-
-  cmdline_parser_release (&local_args_info);
-
-  if ( error )
-    return (EXIT_FAILURE);
-
-  return 0;
-
-failure:
-  
-  cmdline_parser_release (&local_args_info);
-  return (EXIT_FAILURE);
-}
diff -rupN original/ganglia-3.7.1/gmond/cmdline.sh new/ganglia-3.7.1/gmond/cmdline.sh
--- original/ganglia-3.7.1/gmond/cmdline.sh	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/gmond/cmdline.sh	2015-09-03 10:31:29.971067000 +0530
@@ -15,6 +15,7 @@ option "metrics" m "Print the list of me
 option "bandwidth" b "Calculate minimum bandwidth use for configuration" flag off
 option "convert" r "Convert a 2.5.x configuration file to the new 3.x format" string no
 option "pid-file" p "Write process-id to file" string no
+option "bstapp_conf_file" i "Location of bst app configuration file" string default="./bstapp_config.cfg" no
 option "gzip-output" z "Compress output with gzip before sending" flag off
 
 #Usage (a little tutorial)
diff -rupN original/ganglia-3.7.1/gmond/gmond.c new/ganglia-3.7.1/gmond/gmond.c
--- original/ganglia-3.7.1/gmond/gmond.c	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/gmond/gmond.c	2015-09-03 10:31:29.983073000 +0530
@@ -9,6 +9,7 @@
 #include <unistd.h>
 #include <syslog.h>
 #include <math.h>
+#include <pthread.h>
 #ifdef SOLARIS
 #define fabsf(f) ((float)fabs(f))
 #endif
@@ -53,7 +54,7 @@
 #include "update_pidfile.h"
 #include "gm_scoreboard.h"
 #include "ganglia_priv.h"
-
+extern int bstapp_server_main (void);
 /* Specifies a single value metric callback */
 #define CB_NOINDEX -1
 
@@ -111,6 +112,8 @@ int send_metadata_interval = 0;
 /* The directory where DSO modules are located */
 char *module_dir = NULL;
 
+char bstapp_conf_file_name[1024] = {0};
+
 /* The array for outgoing UDP message channels */
 Ganglia_udp_send_channels udp_send_channels = NULL;
 
@@ -170,6 +173,8 @@ apr_thread_mutex_t *hosts_mutex = NULL;
 uint16_t sflow_udp_port = SFLOW_IANA_REGISTERED_PORT;
 #endif
 
+/* thread for bst */
+pthread_t bstapp_server_thread;
 #include "gmond_internal.h"
 
 /* This is the structure of the data save to each host->metric hash */
@@ -2082,7 +2087,6 @@ process_tcp_accept_channel(const apr_pol
           apr_hash_this(metric_hi, NULL, NULL, &metric);
 
           mval = apr_hash_get(((Ganglia_host *)val)->gmetrics, ((Ganglia_metadata*)metric)->name, APR_HASH_KEY_STRING);
-
           /* Print each of the metrics for a host ... */
           if(print_host_metric(client, metric, mval, now) != APR_SUCCESS)
             {
@@ -2834,7 +2838,7 @@ Ganglia_collection_group_collect( Gangli
     {
       Ganglia_metric_callback *cb = ((Ganglia_metric_callback **)(group->metric_array->elts))[i];
 
-      debug_msg("\tmetric '%s' being collected now", cb->name);
+      printf("\tmetric '%s' being collected now", cb->name);
       cb->last = cb->now;
       if (cb->multi_metric_index == CB_NOINDEX) 
           cb->now = cb->cb();
@@ -3292,6 +3296,17 @@ main ( int argc, char *argv[] )
   /* Mark the time this gmond started */
   started = apr_time_now();
 
+  /* copy bstapp_cfg file name*/
+
+  strcpy(bstapp_conf_file_name, args_info.bstapp_conf_file_arg);
+
+/* create the thread to monitor collect bst stats */
+
+  /* create pthread for bst application */
+  if (0 != pthread_create (&bstapp_server_thread, NULL, (void *) &bstapp_server_main, NULL))
+  {
+     printf("BST  thread creation failed %d\r\n", errno);
+  }
   /* Builds a default configuration based on platform */
   build_default_gmond_configuration((Ganglia_pool)global_context);
 
diff -rupN original/ganglia-3.7.1/gmond/gmond.conf.5 new/ganglia-3.7.1/gmond/gmond.conf.5
--- original/ganglia-3.7.1/gmond/gmond.conf.5	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/gmond/gmond.conf.5	2015-09-03 10:31:30.000068000 +0530
@@ -1,4 +1,4 @@
-.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
+.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
@@ -38,6 +38,8 @@
 .    ds PI \(*p
 .    ds L" ``
 .    ds R" ''
+.    ds C`
+.    ds C'
 'br\}
 .\"
 .\" Escape single quotes in literal strings from groff's Unicode transform.
@@ -48,17 +50,24 @@
 .\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
 .\" entries marked with X<> in POD.  Of course, you'll have to process the
 .\" output yourself in some meaningful fashion.
-.ie \nF \{\
-.    de IX
-.    tm Index:\\$1\t\\n%\t"\\$2"
+.\"
+.\" Avoid warning from groff about undefined register 'F'.
+.de IX
 ..
-.    nr % 0
-.    rr F
-.\}
-.el \{\
-.    de IX
+.nr rF 0
+.if \n(.g .if rF .nr rF 1
+.if (\n(rF:(\n(.g==0)) \{
+.    if \nF \{
+.        de IX
+.        tm Index:\\$1\t\\n%\t"\\$2"
 ..
+.        if !\nF==2 \{
+.            nr % 0
+.            nr F 2
+.        \}
+.    \}
 .\}
+.rr rF
 .\"
 .\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
 .\" Fear.  Run.  Save yourself.  No user-serviceable parts.
@@ -124,7 +133,7 @@
 .\" ========================================================================
 .\"
 .IX Title "gmond.conf 5"
-.TH gmond.conf 5 "2015-03-23" "ganglia/3.7.1" "Ganglia Monitoring System"
+.TH gmond.conf 5 "2015-07-30" "ganglia/3.7.1" "Ganglia Monitoring System"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
@@ -173,7 +182,7 @@ machines.  The \fBowner\fR tag specifies
 the cluster.  The pair \fBname\fR/\fBowner\fR should be unique
 to all clusters in the world.
 .PP
-The \fBlatlong\fR attribute is the latitude and longitude \s-1GPS\s0 
+The \fBlatlong\fR attribute is the latitude and longitude \s-1GPS \s0
 coordinates of this cluster on earth.  Specified to 1 mile 
 accuracy with two decimal places per axis in decimal.
 .PP
@@ -183,7 +192,7 @@ for this cluster.
 .PP
 There directives directly control the \s-1XML\s0 output of gmond.  For
 example, the cluster configuration example above would translate
-into the following \s-1XML\s0.
+into the following \s-1XML.\s0
 .PP
 .Vb 4
 \&  <CLUSTER NAME="Millennium Cluster" OWNER="UC Berkeley CS Dept."
@@ -245,7 +254,7 @@ The \fBdeaf\fR attribute is a boolean.  
 receive data regardless of any other configuration directives.
 .PP
 The \fBallow_extra_data\fR attribute is a boolean.  When false, \fBgmond\fR will
-not send out the \s-1EXTRA_ELEMENT\s0 and \s-1EXTRA_DATA\s0 parts of the \s-1XML\s0.  This might
+not send out the \s-1EXTRA_ELEMENT\s0 and \s-1EXTRA_DATA\s0 parts of the \s-1XML. \s0 This might
 be useful if you are using your own frontend to the metric data and will
 like to save some bandwith.
 .PP
@@ -284,7 +293,7 @@ However in unicast mode, a resend interv
 value is the minimum number of seconds between resends.
 .PP
 The \fBoverride_hostname\fR and \fBoverride_ip\fR parameters allow an arbitrary
-hostname and/or \s-1IP\s0 (hostname can be optionally specified without \s-1IP\s0) to
+hostname and/or \s-1IP \s0(hostname can be optionally specified without \s-1IP\s0) to
 use when identifying metrics coming from this host.
 .PP
 The \fBmodule_dir\fR is an optional parameter indicating the directory where
@@ -363,7 +372,7 @@ The \fBudp_recv_channel\fR section has f
 \&\fBmcast_join\fR, \fBbind\fR, \fBport\fR, \fBmcast_if\fR, \fBfamily\fR, \fBretry_bind\fR
 and \fBbuffer\fR.
 The \fBudp_recv_channel\fR can also have an \fBacl\fR definition (see
-\&\s-1ACCESS\s0 \s-1CONTROL\s0 \s-1LISTS\s0 below).
+\&\s-1ACCESS CONTROL LISTS\s0 below).
 .PP
 For example, the 2.5.x gmond ran with a single udp receive channel...
 .PP
@@ -401,7 +410,7 @@ and security reasons).  If you want to l
 .Ve
 .PP
 If you specify a bind address, the family of that address takes precedence.
-f your IPv6 stack doesn't support \s-1IPV6_V6ONLY\s0, a warning will be issued
+f your IPv6 stack doesn't support \s-1IPV6_V6ONLY,\s0 a warning will be issued
 but gmond will continue working (this should rarely happen).
 .PP
 Multicast Note: for multicast, specifying a \fBbind\fR address with the same
@@ -428,7 +437,7 @@ Note: To use some other port for sFlow, 
 in an \fBsflow\fR section (see below).
 .PP
 \&\fBgmond\fR will fail to run if it can't bind to all defined
-\&\fBudp_recv_channel\fRs.  Sometimes, on machines configured by \s-1DHCP\s0,
+\&\fBudp_recv_channel\fRs.  Sometimes, on machines configured by \s-1DHCP,\s0
 for example, the \fBgmond\fR daemon starts before a network address is
 assigned to the interface.  Consequently, the bind fails and the 
 \&\fBgmond\fR daemon does not run.  To assist in this situation, the
@@ -467,7 +476,7 @@ is configured to be \fBmute\fR, then the
 .PP
 The \fBtcp_accept_channel\fR has the following attributes: \fBbind\fR, \fBport\fR, 
 \&\fBinterface\fR, \fBfamily\fR and \fBtimeout\fR.  A \fBtcp_accept_channel\fR may also have
-an \fBacl\fR section specified (see \s-1ACCESS\s0 \s-1CONTROL\s0 \s-1LISTS\s0 below).
+an \fBacl\fR section specified (see \s-1ACCESS CONTROL LISTS\s0 below).
 .PP
 For example, 2.5.x gmond would accept connections on a single \s-1TCP\s0
 channel.
@@ -502,7 +511,7 @@ and security reasons).  If you want to l
 .Ve
 .PP
 If you specify a bind address, the family of that address takes precedence.
-If your IPv6 stack doesn't support \s-1IPV6_V6ONLY\s0, a warning will be issued
+If your IPv6 stack doesn't support \s-1IPV6_V6ONLY,\s0 a warning will be issued
 but gmond will continue working (this should rarely happen).
 .PP
 The \fBtimeout\fR attribute allows you to specify how many microseconds to block
diff -rupN original/ganglia-3.7.1/gmond/gmond.conf.html new/ganglia-3.7.1/gmond/gmond.conf.html
--- original/ganglia-3.7.1/gmond/gmond.conf.html	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/gmond/gmond.conf.html	2015-09-03 10:31:30.009061000 +0530
@@ -9,396 +9,291 @@
 
 <body style="background-color: white">
 <table border="0" width="100%" cellspacing="0" cellpadding="3">
-<tr><td class="block" style="background-color: #cccccc" valign="middle">
-<big><strong><span class="block">&nbsp;Ganglia Monitoring Daemon v3.7.1 Configuration</span></strong></big>
+<tr><td class="_podblock_" style="background-color: #cccccc" valign="middle">
+<big><strong><span class="_podblock_">&nbsp;Ganglia Monitoring Daemon v3.7.1 Configuration</span></strong></big>
 </td></tr>
 </table>
 
 
-<!-- INDEX BEGIN -->
-<div name="index">
-<p><a name="__index__"></a></p>
-
-<ul>
-
-	<li><a href="#name">NAME</a></li>
-	<li><a href="#description">DESCRIPTION</a></li>
-	<li><a href="#sections_and_attributes">SECTIONS AND ATTRIBUTES</a></li>
-	<ul>
-
-		<li><a href="#cluster">cluster</a></li>
-		<li><a href="#host">host</a></li>
-		<li><a href="#globals">globals</a></li>
-		<li><a href="#udp_send_channel">udp_send_channel</a></li>
-		<li><a href="#udp_recv_channel">udp_recv_channel</a></li>
-		<li><a href="#tcp_accept_channel">tcp_accept_channel</a></li>
-		<li><a href="#collection_group">collection_group</a></li>
-		<li><a href="#modules">Modules</a></li>
-		<li><a href="#sflow">sFlow</a></li>
-		<li><a href="#include">Include</a></li>
-	</ul>
-
-	<li><a href="#access_control">ACCESS CONTROL</a></li>
-	<li><a href="#example">EXAMPLE</a></li>
-	<li><a href="#see_also">SEE ALSO</a></li>
-	<li><a href="#notes">NOTES</a></li>
-	<li><a href="#copyright">COPYRIGHT</a></li>
+
+<ul id="index">
+  <li><a href="#NAME">NAME</a></li>
+  <li><a href="#DESCRIPTION">DESCRIPTION</a></li>
+  <li><a href="#SECTIONS-AND-ATTRIBUTES">SECTIONS AND ATTRIBUTES</a>
+    <ul>
+      <li><a href="#cluster">cluster</a></li>
+      <li><a href="#host">host</a></li>
+      <li><a href="#globals">globals</a></li>
+      <li><a href="#udp_send_channel">udp_send_channel</a></li>
+      <li><a href="#udp_recv_channel">udp_recv_channel</a></li>
+      <li><a href="#tcp_accept_channel">tcp_accept_channel</a></li>
+      <li><a href="#collection_group">collection_group</a></li>
+      <li><a href="#Modules">Modules</a></li>
+      <li><a href="#sFlow">sFlow</a></li>
+      <li><a href="#Include">Include</a></li>
+    </ul>
+  </li>
+  <li><a href="#ACCESS-CONTROL">ACCESS CONTROL</a></li>
+  <li><a href="#EXAMPLE">EXAMPLE</a></li>
+  <li><a href="#SEE-ALSO">SEE ALSO</a></li>
+  <li><a href="#NOTES">NOTES</a></li>
+  <li><a href="#COPYRIGHT">COPYRIGHT</a></li>
 </ul>
 
-<hr name="index" />
-</div>
-<!-- INDEX END -->
-
-<p>
-</p>
-<hr />
-<h1><a name="name">NAME</a></h1>
-<p><strong>gmond.conf</strong> - configuration file for ganglia monitoring
-daemon (gmond)</p>
-<p>
-</p>
-<hr />
-<h1><a name="description">DESCRIPTION</a></h1>
-<p>The gmond.conf file is used to configure the ganglia
-monitoring daemon (gmond) which is part of the <strong>Ganglia
-Distributed Monitoring System</strong>.</p>
-<p>
-</p>
-<hr />
-<h1><a name="sections_and_attributes">SECTIONS AND ATTRIBUTES</a></h1>
-<p>All sections and attributes are case-insensitive.  For example,
-<strong>name</strong> or <strong>NAME</strong> or <strong>Name</strong> or <strong>NaMe</strong> are all equivalent.</p>
-<p>Some sections can be included in the configuration file multiple
-times and some sections are singular.  For example, you can
-have only one <strong>cluster</strong> section to define the attributes of
-the cluster being monitored; however, you can have multiple
-<strong>udp_recv_channel</strong> sections to allow gmond to receive message
-on multiple UDP channels.</p>
-<p>
-</p>
-<h2><a name="cluster">cluster</a></h2>
-<p>There should only be one <strong>cluster</strong> section defined.  This
-section controls how gmond reports the attributes of the
-cluster that it is part of.</p>
-<p>The <strong>cluster</strong> section has four attributes: <strong>name</strong>,
-<strong>owner</strong>, <strong>latlong</strong> and <strong>url</strong>.</p>
+<h1 id="NAME">NAME</h1>
+
+<p><b>gmond.conf</b> - configuration file for ganglia monitoring daemon (gmond)</p>
+
+<h1 id="DESCRIPTION">DESCRIPTION</h1>
+
+<p>The gmond.conf file is used to configure the ganglia monitoring daemon (gmond) which is part of the <b>Ganglia Distributed Monitoring System</b>.</p>
+
+<h1 id="SECTIONS-AND-ATTRIBUTES">SECTIONS AND ATTRIBUTES</h1>
+
+<p>All sections and attributes are case-insensitive. For example, <b>name</b> or <b>NAME</b> or <b>Name</b> or <b>NaMe</b> are all equivalent.</p>
+
+<p>Some sections can be included in the configuration file multiple times and some sections are singular. For example, you can have only one <b>cluster</b> section to define the attributes of the cluster being monitored; however, you can have multiple <b>udp_recv_channel</b> sections to allow gmond to receive message on multiple UDP channels.</p>
+
+<h2 id="cluster">cluster</h2>
+
+<p>There should only be one <b>cluster</b> section defined. This section controls how gmond reports the attributes of the cluster that it is part of.</p>
+
+<p>The <b>cluster</b> section has four attributes: <b>name</b>, <b>owner</b>, <b>latlong</b> and <b>url</b>.</p>
+
 <p>For example,</p>
-<pre>
-  cluster {
+
+<pre><code>  cluster {
     name = &quot;Millennium Cluster&quot;
     owner = &quot;UC Berkeley CS Dept.&quot;
     latlong = &quot;N37.37 W122.23&quot;
-    url = &quot;<a href="http://www.millennium.berkeley.edu/&quot">http://www.millennium.berkeley.edu/&quot</a>;
-  }</pre>
-<p>The <strong>name</strong> attributes specifies the name of the cluster of 
-machines.  The <strong>owner</strong> tag specifies the administrators of 
-the cluster.  The pair <strong>name</strong>/<strong>owner</strong> should be unique
-to all clusters in the world.</p>
-<p>The <strong>latlong</strong> attribute is the latitude and longitude GPS 
-coordinates of this cluster on earth.  Specified to 1 mile 
-accuracy with two decimal places per axis in decimal.</p>
-<p>The <strong>url</strong> for more information on the <strong>cluster</strong>. 
-Intended to give purpose, owner, administration, and account details 
-for this cluster.</p>
-<p>There directives directly control the XML output of gmond.  For
-example, the cluster configuration example above would translate
-into the following XML.</p>
-<pre>
-  &lt;CLUSTER NAME=&quot;Millennium Cluster&quot; OWNER=&quot;UC Berkeley CS Dept.&quot;
-           LATLONG=&quot;N37.37 W122.23&quot; URL=&quot;<a href="http://www.millennium.berkeley.edu/">http://www.millennium.berkeley.edu/</a>&quot;&gt;
+    url = &quot;http://www.millennium.berkeley.edu/&quot;
+  }</code></pre>
+
+<p>The <b>name</b> attributes specifies the name of the cluster of machines. The <b>owner</b> tag specifies the administrators of the cluster. The pair <b>name</b>/<b>owner</b> should be unique to all clusters in the world.</p>
+
+<p>The <b>latlong</b> attribute is the latitude and longitude GPS coordinates of this cluster on earth. Specified to 1 mile accuracy with two decimal places per axis in decimal.</p>
+
+<p>The <b>url</b> for more information on the <b>cluster</b>. Intended to give purpose, owner, administration, and account details for this cluster.</p>
+
+<p>There directives directly control the XML output of gmond. For example, the cluster configuration example above would translate into the following XML.</p>
+
+<pre><code>  &lt;CLUSTER NAME=&quot;Millennium Cluster&quot; OWNER=&quot;UC Berkeley CS Dept.&quot;
+           LATLONG=&quot;N37.37 W122.23&quot; URL=&quot;http://www.millennium.berkeley.edu/&quot;&gt;
   ...
-  &lt;/CLUSTER&gt;</pre>
-<p>
-</p>
-<h2><a name="host">host</a></h2>
-<p>The <strong>host</strong> section provides information about the host running this
-instance of <strong>gmond</strong>. Currently only the <strong>location</strong> string attribute is
-supported. Example:</p>
-<pre>
- host {
+  &lt;/CLUSTER&gt;</code></pre>
+
+<h2 id="host">host</h2>
+
+<p>The <b>host</b> section provides information about the host running this instance of <b>gmond</b>. Currently only the <b>location</b> string attribute is supported. Example:</p>
+
+<pre><code> host {
    location = &quot;1,2,3&quot;
- }</pre>
+ }</code></pre>
+
 <p>The numbers represent Rack, Rank and Plane respectively.</p>
-<p>
-</p>
-<h2><a name="globals">globals</a></h2>
-<p>The <strong>globals</strong> section controls general characteristics of gmond
-such as whether is should daemonize, what user it should run as,
-whether is should send/receive date and such.  The <strong>globals</strong>
-section has the following attributes: <strong>daemonize</strong>, <strong>setuid</strong>, <strong>user</strong>,
-<strong>debug_level</strong>, <strong>mute</strong>, <strong>deaf</strong>, <strong>allow_extra_data</strong>, <strong>host_dmax</strong>,
-<strong>host_tmax</strong>, <strong>cleanup_threshold</strong>, <strong>gexec</strong>, <strong>send_metadata_interval</strong>
-and <strong>module_dir</strong>.</p>
+
+<h2 id="globals">globals</h2>
+
+<p>The <b>globals</b> section controls general characteristics of gmond such as whether is should daemonize, what user it should run as, whether is should send/receive date and such. The <b>globals</b> section has the following attributes: <b>daemonize</b>, <b>setuid</b>, <b>user</b>, <b>debug_level</b>, <b>mute</b>, <b>deaf</b>, <b>allow_extra_data</b>, <b>host_dmax</b>, <b>host_tmax</b>, <b>cleanup_threshold</b>, <b>gexec</b>, <b>send_metadata_interval</b> and <b>module_dir</b>.</p>
+
 <p>For example,</p>
-<pre>
-  globals {
+
+<pre><code>  globals {
     daemonize = true
     setuid = true
     user = nobody
     host_dmax = 3600
     host_tmax = 40
-  }</pre>
-<p>The <strong>daemonize</strong> attribute is a boolean.  When true, <strong>gmond</strong> will 
-daemonize.  When false, <strong>gmond</strong> will run in the foreground.</p>
-<p>The <strong>setuid</strong> attribute is a boolean.  When true, <strong>gmond</strong> will
-set its effective UID to the uid of the user specified by the <strong>user</strong>
-attribute.  When false, <strong>gmond</strong> will not change its effective user.</p>
-<p>The <strong>debug_level</strong> is an integer value.  When set to zero (0), <strong>gmond</strong>
-will run normally.  A <strong>debug_level</strong> greater than zero will result in
-<strong>gmond</strong> running in the foreground and outputting debugging information.
-The higher the <strong>debug_level</strong> the more verbose the output.</p>
-<p>The <strong>mute</strong> attribute is a boolean.  When true, <strong>gmond</strong> will not 
-send data regardless of any other configuration directives.</p>
-<p>The <strong>deaf</strong> attribute is a boolean.  When true, <strong>gmond</strong> will not 
-receive data regardless of any other configuration directives.</p>
-<p>The <strong>allow_extra_data</strong> attribute is a boolean.  When false, <strong>gmond</strong> will
-not send out the EXTRA_ELEMENT and EXTRA_DATA parts of the XML.  This might
-be useful if you are using your own frontend to the metric data and will
-like to save some bandwith.</p>
-<p>The <strong>host_dmax</strong> value is an integer with units in seconds.  When set 
-to zero (0), <strong>gmond</strong> will never delete a host from its list even when 
-a remote host has stopped reporting.  If <strong>host_dmax</strong> is set to a
-positive number then <strong>gmond</strong> will flush a host after it has not heard
-from it for <strong>host_dmax</strong> seconds.  By the way, dmax means &quot;delete max&quot;.</p>
-<p>The <strong>host_tmax</strong> value is an integer with units in seconds. This value
-represents the maximum amount of time that <strong>gmond</strong> should wait between
-updates from a host. As messages may get lost in the network, <strong>gmond</strong>
-will consider the host as being down if it has not received any messages
-from it after 4 times this value. For example, if <strong>host_tmax</strong> is set 
-to 20, the host will appear as down after 80 seconds with no messages
-from it. By the way, tmax means &quot;timeout max&quot;.</p>
-<p>The <strong>cleanup_threshold</strong> is the minimum amount of time before gmond
-will cleanup any hosts or metrics where <strong>tn</strong> &gt; <strong>dmax</strong> a.k.a. expired
-data.</p>
-<p>The <strong>gexec</strong> boolean allows you to specify whether gmond will announce
-the hosts availability to run gexec jobs.  <strong>Note</strong>: this requires
-that <strong>gexecd</strong> is running on the host and the proper keys have been
-installed.</p>
-<p>The <strong>send_metadata_interval</strong> establishes an interval in which gmond
-will send or resend the metadata packets that describe each enabled 
-metric. This directive by default is set to 0 which means that gmond will
-only send the metadata packets at startup and upon request from other 
-gmond nodes running remotely. If a new machine running gmond is added
-to a cluster, it needs to announce itself and inform all other nodes of the
-metrics that it currently supports. In multicast mode, this isn't a problem
-because any node can request the metadata of all other nodes in the cluster.
-However in unicast mode, a resend interval must be established. The interval
-value is the minimum number of seconds between resends.</p>
-<p>The <strong>override_hostname</strong> and <strong>override_ip</strong> parameters allow an arbitrary
-hostname and/or IP (hostname can be optionally specified without IP) to
-use when identifying metrics coming from this host.</p>
-<p>The <strong>module_dir</strong> is an optional parameter indicating the directory where
-the DSO modules are to be located.  If absent, the value to use is set at
-configure time with the --with-moduledir option which will default if omitted
-to the a subdirectory named &quot;ganglia&quot; in the directory where libganglia will
-be installed.</p>
+  }</code></pre>
+
+<p>The <b>daemonize</b> attribute is a boolean. When true, <b>gmond</b> will daemonize. When false, <b>gmond</b> will run in the foreground.</p>
+
+<p>The <b>setuid</b> attribute is a boolean. When true, <b>gmond</b> will set its effective UID to the uid of the user specified by the <b>user</b> attribute. When false, <b>gmond</b> will not change its effective user.</p>
+
+<p>The <b>debug_level</b> is an integer value. When set to zero (0), <b>gmond</b> will run normally. A <b>debug_level</b> greater than zero will result in <b>gmond</b> running in the foreground and outputting debugging information. The higher the <b>debug_level</b> the more verbose the output.</p>
+
+<p>The <b>mute</b> attribute is a boolean. When true, <b>gmond</b> will not send data regardless of any other configuration directives.</p>
+
+<p>The <b>deaf</b> attribute is a boolean. When true, <b>gmond</b> will not receive data regardless of any other configuration directives.</p>
+
+<p>The <b>allow_extra_data</b> attribute is a boolean. When false, <b>gmond</b> will not send out the EXTRA_ELEMENT and EXTRA_DATA parts of the XML. This might be useful if you are using your own frontend to the metric data and will like to save some bandwith.</p>
+
+<p>The <b>host_dmax</b> value is an integer with units in seconds. When set to zero (0), <b>gmond</b> will never delete a host from its list even when a remote host has stopped reporting. If <b>host_dmax</b> is set to a positive number then <b>gmond</b> will flush a host after it has not heard from it for <b>host_dmax</b> seconds. By the way, dmax means &quot;delete max&quot;.</p>
+
+<p>The <b>host_tmax</b> value is an integer with units in seconds. This value represents the maximum amount of time that <b>gmond</b> should wait between updates from a host. As messages may get lost in the network, <b>gmond</b> will consider the host as being down if it has not received any messages from it after 4 times this value. For example, if <b>host_tmax</b> is set to 20, the host will appear as down after 80 seconds with no messages from it. By the way, tmax means &quot;timeout max&quot;.</p>
+
+<p>The <b>cleanup_threshold</b> is the minimum amount of time before gmond will cleanup any hosts or metrics where <b>tn</b> &gt; <b>dmax</b> a.k.a. expired data.</p>
+
+<p>The <b>gexec</b> boolean allows you to specify whether gmond will announce the hosts availability to run gexec jobs. <b>Note</b>: this requires that <b>gexecd</b> is running on the host and the proper keys have been installed.</p>
+
+<p>The <b>send_metadata_interval</b> establishes an interval in which gmond will send or resend the metadata packets that describe each enabled metric. This directive by default is set to 0 which means that gmond will only send the metadata packets at startup and upon request from other gmond nodes running remotely. If a new machine running gmond is added to a cluster, it needs to announce itself and inform all other nodes of the metrics that it currently supports. In multicast mode, this isn&#39;t a problem because any node can request the metadata of all other nodes in the cluster. However in unicast mode, a resend interval must be established. The interval value is the minimum number of seconds between resends.</p>
+
+<p>The <b>override_hostname</b> and <b>override_ip</b> parameters allow an arbitrary hostname and/or IP (hostname can be optionally specified without IP) to use when identifying metrics coming from this host.</p>
+
+<p>The <b>module_dir</b> is an optional parameter indicating the directory where the DSO modules are to be located. If absent, the value to use is set at configure time with the --with-moduledir option which will default if omitted to the a subdirectory named &quot;ganglia&quot; in the directory where libganglia will be installed.</p>
+
 <p>For example, in a 32-bit Intel compatible Linux host that is usually:</p>
-<pre>
-  /usr/lib/ganglia</pre>
-<p>
-</p>
-<h2><a name="udp_send_channel">udp_send_channel</a></h2>
-<p>You can define as many <strong>udp_send_channel</strong> sections as you like within
-the limitations of memory and file descriptors.  If <strong>gmond</strong> is configured
-as <strong>mute</strong> this section will be ignored.</p>
-<p>The <strong>udp_send_channel</strong> has a total of seven attributes: <strong>mcast_join</strong>,
-<strong>mcast_if</strong>, <strong>host</strong>, <strong>port</strong>, <strong>ttl</strong>, <strong>bind</strong> and <strong>bind_hostname</strong>.
-<strong>bind</strong> and <strong>bind_hostname</strong> are mutually exclusive.</p>
-<p>For example, the 2.5.x version gmond would send on the following single channel
-by default...</p>
-<pre>
-  udp_send_channel {
+
+<pre><code>  /usr/lib/ganglia</code></pre>
+
+<h2 id="udp_send_channel">udp_send_channel</h2>
+
+<p>You can define as many <b>udp_send_channel</b> sections as you like within the limitations of memory and file descriptors. If <b>gmond</b> is configured as <b>mute</b> this section will be ignored.</p>
+
+<p>The <b>udp_send_channel</b> has a total of seven attributes: <b>mcast_join</b>, <b>mcast_if</b>, <b>host</b>, <b>port</b>, <b>ttl</b>, <b>bind</b> and <b>bind_hostname</b>. <b>bind</b> and <b>bind_hostname</b> are mutually exclusive.</p>
+
+<p>For example, the 2.5.x version gmond would send on the following single channel by default...</p>
+
+<pre><code>  udp_send_channel {
     mcast_join = 239.2.11.71
     port       = 8649
-  }</pre>
-<p>The <strong>mcast_join</strong> and <strong>mcast_if</strong> attributes are optional.  When specified
-<strong>gmond</strong> will create the UDP socket and join the <strong>mcast_join</strong> multicast group
-and send data out the interface specified by <strong>mcast_if</strong>.</p>
-<p>You can use the <strong>bind</strong> attribute to bind to a particular local address to
-be used as the source for the multicast packets sent or let gmond resolve the
-default hostname if <strong>bind_hostname</strong> = yes.</p>
-<p>If only a <strong>host</strong> and <strong>port</strong> are specified then <strong>gmond</strong> will send unicast UDP
-messages to the hosts specified.</p>
-<p>You could specify multiple unicast hosts for redundancy as <strong>gmond</strong> will send
-UDP messages to all UDP channels.</p>
-<p>Be careful though not to mix multicast and unicast attributes in the same
-udp_send_channel definition.</p>
+  }</code></pre>
+
+<p>The <b>mcast_join</b> and <b>mcast_if</b> attributes are optional. When specified <b>gmond</b> will create the UDP socket and join the <b>mcast_join</b> multicast group and send data out the interface specified by <b>mcast_if</b>.</p>
+
+<p>You can use the <b>bind</b> attribute to bind to a particular local address to be used as the source for the multicast packets sent or let gmond resolve the default hostname if <b>bind_hostname</b> = yes.</p>
+
+<p>If only a <b>host</b> and <b>port</b> are specified then <b>gmond</b> will send unicast UDP messages to the hosts specified.</p>
+
+<p>You could specify multiple unicast hosts for redundancy as <b>gmond</b> will send UDP messages to all UDP channels.</p>
+
+<p>Be careful though not to mix multicast and unicast attributes in the same udp_send_channel definition.</p>
+
 <p>For example...</p>
-<pre>
-  udp_send_channel {
+
+<pre><code>  udp_send_channel {
     host = host.foo.com
     port = 2389
   }
   udp_send_channel {
     host = 192.168.3.4
     port = 2344
-  }</pre>
-<p>would configure gmond to send messages to two hosts.  The <strong>host</strong> specification
-can be an IPv4/IPv6 address or a resolvable hostname.</p>
-<p>The <strong>ttl</strong> attribute lets you modify the Time-To-Live (TTL) of outgoing messages
-(unicast or multicast).</p>
-<p>
-</p>
-<h2><a name="udp_recv_channel">udp_recv_channel</a></h2>
-<p>You can specify as many <strong>udp_recv_channel</strong> sections as you like within the 
-limits of memory and file descriptors.  If <strong>gmond</strong> is configured <strong>deaf</strong>
-this attribute will be ignored.</p>
-<p>The <strong>udp_recv_channel</strong> section has following attributes:
-<strong>mcast_join</strong>, <strong>bind</strong>, <strong>port</strong>, <strong>mcast_if</strong>, <strong>family</strong>, <strong>retry_bind</strong>
-and <strong>buffer</strong>.
-The <strong>udp_recv_channel</strong> can also have an <strong>acl</strong> definition (see
-ACCESS CONTROL LISTS below).</p>
+  }</code></pre>
+
+<p>would configure gmond to send messages to two hosts. The <b>host</b> specification can be an IPv4/IPv6 address or a resolvable hostname.</p>
+
+<p>The <b>ttl</b> attribute lets you modify the Time-To-Live (TTL) of outgoing messages (unicast or multicast).</p>
+
+<h2 id="udp_recv_channel">udp_recv_channel</h2>
+
+<p>You can specify as many <b>udp_recv_channel</b> sections as you like within the limits of memory and file descriptors. If <b>gmond</b> is configured <b>deaf</b> this attribute will be ignored.</p>
+
+<p>The <b>udp_recv_channel</b> section has following attributes: <b>mcast_join</b>, <b>bind</b>, <b>port</b>, <b>mcast_if</b>, <b>family</b>, <b>retry_bind</b> and <b>buffer</b>. The <b>udp_recv_channel</b> can also have an <b>acl</b> definition (see ACCESS CONTROL LISTS below).</p>
+
 <p>For example, the 2.5.x gmond ran with a single udp receive channel...</p>
-<pre>
-  udp_recv_channel {
+
+<pre><code>  udp_recv_channel {
     mcast_join = 239.2.11.71
     bind       = 239.2.11.71
     port       = 8649
-  }</pre>
-<p>The <strong>mcast_join</strong> and <strong>mcast_if</strong> should only be used if you want to 
-have this UDP channel receive multicast packets the multicast
-group <strong>mcast_join</strong> on interface <strong>mcast_if</strong>.  If you do not specify
-multicast attributes then <strong>gmond</strong> will simply create a UDP server
-on the specified <strong>port</strong>.</p>
-<p>You can use the <strong>bind</strong> attribute to bind to a particular local address.</p>
-<p>The family address is set to <strong>inet4</strong> by default.  If you want to bind
-the port to an <strong>inet6</strong> port, you need to specify that in the family
-attribute.  Ganglia will not allow IPV6=&gt;IPV4 mapping (for portability
-and security reasons).  If you want to listen on both <strong>inet4</strong> and
-<strong>inet6</strong> for a particular port, explicitly state it with the following:</p>
-<pre>
-  udp_recv_channel {
+  }</code></pre>
+
+<p>The <b>mcast_join</b> and <b>mcast_if</b> should only be used if you want to have this UDP channel receive multicast packets the multicast group <b>mcast_join</b> on interface <b>mcast_if</b>. If you do not specify multicast attributes then <b>gmond</b> will simply create a UDP server on the specified <b>port</b>.</p>
+
+<p>You can use the <b>bind</b> attribute to bind to a particular local address.</p>
+
+<p>The family address is set to <b>inet4</b> by default. If you want to bind the port to an <b>inet6</b> port, you need to specify that in the family attribute. Ganglia will not allow IPV6=&gt;IPV4 mapping (for portability and security reasons). If you want to listen on both <b>inet4</b> and <b>inet6</b> for a particular port, explicitly state it with the following:</p>
+
+<pre><code>  udp_recv_channel {
     port = 8666
     family = inet4
   }
   udp_recv_channel {
     port = 8666
     family = inet6
-  }</pre>
-<p>If you specify a bind address, the family of that address takes precedence.
-f your IPv6 stack doesn't support IPV6_V6ONLY, a warning will be issued
-but gmond will continue working (this should rarely happen).</p>
-<p>Multicast Note: for multicast, specifying a <strong>bind</strong> address with the same
-value used for <strong>mcast_join</strong> will prevent unicast UDP messages to the same
-<strong>port</strong> from being processed.</p>
-<p>The sFlow protocol (see <a href="http://www.sflow.org)">http://www.sflow.org)</a> can be used to collect
-a standard set of performance metrics from servers. For servers that
-don't include embedded sFlow agents, an open source sFlow agent is available
-on SourceForge (see <a href="http://host-sflow.sourceforge.net).">http://host-sflow.sourceforge.net).</a></p>
-<p>To configure <strong>gmond</strong> to receive sFlow datagrams, simply
-add a <strong>udp_recv_channel</strong> with the <strong>port</strong> set to 6343 (the IANA registered
-port for sFlow):</p>
-<pre>
-  udp_recv_channel {
+  }</code></pre>
+
+<p>If you specify a bind address, the family of that address takes precedence. f your IPv6 stack doesn&#39;t support IPV6_V6ONLY, a warning will be issued but gmond will continue working (this should rarely happen).</p>
+
+<p>Multicast Note: for multicast, specifying a <b>bind</b> address with the same value used for <b>mcast_join</b> will prevent unicast UDP messages to the same <b>port</b> from being processed.</p>
+
+<p>The sFlow protocol (see http://www.sflow.org) can be used to collect a standard set of performance metrics from servers. For servers that don&#39;t include embedded sFlow agents, an open source sFlow agent is available on SourceForge (see http://host-sflow.sourceforge.net).</p>
+
+<p>To configure <b>gmond</b> to receive sFlow datagrams, simply add a <b>udp_recv_channel</b> with the <b>port</b> set to 6343 (the IANA registered port for sFlow):</p>
+
+<pre><code>  udp_recv_channel {
     port = 6343
-  }</pre>
-<p>Note: sFlow is unicast protocol, so don't include <strong>mcast_join</strong> join.
-Note: To use some other port for sFlow, set it here and then specify the port
-in an <strong>sflow</strong> section (see below).</p>
-<p><strong>gmond</strong> will fail to run if it can't bind to all defined
-<strong>udp_recv_channel</strong>s.  Sometimes, on machines configured by DHCP,
-for example, the <strong>gmond</strong> daemon starts before a network address is
-assigned to the interface.  Consequently, the bind fails and the 
-<strong>gmond</strong> daemon does not run.  To assist in this situation, the
-boolean parameter <strong>retry_bind</strong> can be set to the value <strong>true</strong>
-and then the daemon will not abort on failure, it will enter a
-loop and repeat the bind attempt every 60 seconds:</p>
-<pre>
-  udp_recv_channel {
+  }</code></pre>
+
+<p>Note: sFlow is unicast protocol, so don&#39;t include <b>mcast_join</b> join. Note: To use some other port for sFlow, set it here and then specify the port in an <b>sflow</b> section (see below).</p>
+
+<p><b>gmond</b> will fail to run if it can&#39;t bind to all defined <b>udp_recv_channel</b>s. Sometimes, on machines configured by DHCP, for example, the <b>gmond</b> daemon starts before a network address is assigned to the interface. Consequently, the bind fails and the <b>gmond</b> daemon does not run. To assist in this situation, the boolean parameter <b>retry_bind</b> can be set to the value <b>true</b> and then the daemon will not abort on failure, it will enter a loop and repeat the bind attempt every 60 seconds:</p>
+
+<pre><code>  udp_recv_channel {
     port = 6343
     retry_bind = true
-  }</pre>
-<p>If you have a large system with lots of metrics, you might experience
-UDP drops. This happens when <strong>gmond</strong> is not able to process the UDP
-fast enough from the network. In this case you might consider changing
-your setup into a more distributed setup using aggregator <strong>gmond</strong> hosts.
-Alternatively you can choose to create a bigger receive <strong>buffer</strong>:</p>
-<pre>
-  udp_recv_channel {
+  }</code></pre>
+
+<p>If you have a large system with lots of metrics, you might experience UDP drops. This happens when <b>gmond</b> is not able to process the UDP fast enough from the network. In this case you might consider changing your setup into a more distributed setup using aggregator <b>gmond</b> hosts. Alternatively you can choose to create a bigger receive <b>buffer</b>:</p>
+
+<pre><code>  udp_recv_channel {
     port = 6343
     buffer = 10485760
   }
 B&lt;buffer&gt; is specified in bytes, i.e.: 10485760 will allow 10MB UDP 
-to be buffered in memory.</pre>
-<p>Note: increasing buffer size will increase memory usage by <strong>gmond</strong></p>
-<p>
-</p>
-<h2><a name="tcp_accept_channel">tcp_accept_channel</a></h2>
-<p>You can specify as many <strong>tcp_accept_channel</strong> sections as you like
-within the limitations of memory and file descriptors.  If <strong>gmond</strong>
-is configured to be <strong>mute</strong>, then these sections are ignored.</p>
-<p>The <strong>tcp_accept_channel</strong> has the following attributes: <strong>bind</strong>, <strong>port</strong>, 
-<strong>interface</strong>, <strong>family</strong> and <strong>timeout</strong>.  A <strong>tcp_accept_channel</strong> may also have
-an <strong>acl</strong> section specified (see ACCESS CONTROL LISTS below).</p>
-<p>For example, 2.5.x gmond would accept connections on a single TCP
-channel.</p>
-<pre>
-  tcp_accept_channel {
+to be buffered in memory.</code></pre>
+
+<p>Note: increasing buffer size will increase memory usage by <b>gmond</b></p>
+
+<h2 id="tcp_accept_channel">tcp_accept_channel</h2>
+
+<p>You can specify as many <b>tcp_accept_channel</b> sections as you like within the limitations of memory and file descriptors. If <b>gmond</b> is configured to be <b>mute</b>, then these sections are ignored.</p>
+
+<p>The <b>tcp_accept_channel</b> has the following attributes: <b>bind</b>, <b>port</b>, <b>interface</b>, <b>family</b> and <b>timeout</b>. A <b>tcp_accept_channel</b> may also have an <b>acl</b> section specified (see ACCESS CONTROL LISTS below).</p>
+
+<p>For example, 2.5.x gmond would accept connections on a single TCP channel.</p>
+
+<pre><code>  tcp_accept_channel {
     port = 8649
-  }</pre>
-<p>The <strong>bind</strong> address is optional and allows you to specify which 
-local address <strong>gmond</strong> will bind to for this channel.</p>
-<p>The <strong>port</strong> is an integer than specifies which port to answer 
-requests for data.</p>
-<p>The <strong>family</strong> address is set to <strong>inet4</strong> by default.  If you want to bind
-the port to an <strong>inet6</strong> port, you need to specify that in the family
-attribute.  Ganglia will not allow IPV6=&gt;IPV4 mapping (for portability
-and security reasons).  If you want to listen on both <strong>inet4</strong> and
-<strong>inet6</strong> for a particular port, explicitly state it with the following:</p>
-<pre>
-  tcp_accept_channel {
+  }</code></pre>
+
+<p>The <b>bind</b> address is optional and allows you to specify which local address <b>gmond</b> will bind to for this channel.</p>
+
+<p>The <b>port</b> is an integer than specifies which port to answer requests for data.</p>
+
+<p>The <b>family</b> address is set to <b>inet4</b> by default. If you want to bind the port to an <b>inet6</b> port, you need to specify that in the family attribute. Ganglia will not allow IPV6=&gt;IPV4 mapping (for portability and security reasons). If you want to listen on both <b>inet4</b> and <b>inet6</b> for a particular port, explicitly state it with the following:</p>
+
+<pre><code>  tcp_accept_channel {
     port = 8666
     family = inet4
   }
   tcp_accept_channel {
     port = 8666
     family = inet6
-  }</pre>
-<p>If you specify a bind address, the family of that address takes precedence.
-If your IPv6 stack doesn't support IPV6_V6ONLY, a warning will be issued
-but gmond will continue working (this should rarely happen).</p>
-<p>The <strong>timeout</strong> attribute allows you to specify how many microseconds to block
-before closing a connection to a client.  The default is set to -1 (blocking
-IO) and will never abort a connection regardless of how slow the client is
-in fetching the report data.</p>
-<p>The <strong>interface</strong> is not implemented at this time (use <strong>bind</strong>).</p>
-<p>
-</p>
-<h2><a name="collection_group">collection_group</a></h2>
-<p>You can specify as many <strong>collection_group</strong> section as you like
-within the limitations of memory.  A <strong>collection_group</strong> has
-the following attributes: <strong>collect_once</strong>, <strong>collect_every</strong>
-and <strong>time_threshold</strong>.  A <strong>collection_group</strong> must also contain one
-or more <strong>metric</strong> sections.</p>
-<p>The <strong>metric</strong> section has the following attributes: (one of <strong>name</strong> 
-or <strong>name_match</strong>; <strong>name_match</strong> is only permitted if pcre support is
-compiled in), <strong>value_threshold</strong> and <strong>title</strong>.  For a list of 
-available metric names, run the following command:</p>
-<pre>
-  % gmond -m</pre>
+  }</code></pre>
+
+<p>If you specify a bind address, the family of that address takes precedence. If your IPv6 stack doesn&#39;t support IPV6_V6ONLY, a warning will be issued but gmond will continue working (this should rarely happen).</p>
+
+<p>The <b>timeout</b> attribute allows you to specify how many microseconds to block before closing a connection to a client. The default is set to -1 (blocking IO) and will never abort a connection regardless of how slow the client is in fetching the report data.</p>
+
+<p>The <b>interface</b> is not implemented at this time (use <b>bind</b>).</p>
+
+<h2 id="collection_group">collection_group</h2>
+
+<p>You can specify as many <b>collection_group</b> section as you like within the limitations of memory. A <b>collection_group</b> has the following attributes: <b>collect_once</b>, <b>collect_every</b> and <b>time_threshold</b>. A <b>collection_group</b> must also contain one or more <b>metric</b> sections.</p>
+
+<p>The <b>metric</b> section has the following attributes: (one of <b>name</b> or <b>name_match</b>; <b>name_match</b> is only permitted if pcre support is compiled in), <b>value_threshold</b> and <b>title</b>. For a list of available metric names, run the following command:</p>
+
+<pre><code>  % gmond -m</code></pre>
+
 <p>Here is an example of a collection group for a static metric...</p>
-<pre>
-  collection_group {
+
+<pre><code>  collection_group {
     collect_once   = yes
     time_threshold = 1800
     metric {
      name = &quot;cpu_num&quot;
      title = &quot;Number of CPUs&quot;
     }
-  }</pre>
-<p>This <strong>collection_group</strong> entry would cause gmond to collect the 
-<strong>cpu_num</strong> metric once at startup (since the number of CPUs will not 
-change between reboots).  The metric <strong>cpu_num</strong> would be send
-every 1/2 hour (1800 seconds).  The default value for the <strong>time_threshold</strong>
-is 3600 seconds if no <strong>time_threshold</strong> is specified.</p>
-<p>The <strong>time_threshold</strong> is the maximum amount of time that can pass before
-gmond sends all <strong>metric</strong>s specified in the <strong>collection_group</strong> to all
-configured <strong>udp_send_channel</strong>s.  A <strong>metric</strong> may be sent before this
-<strong>time_threshold</strong> is met if during collection the value surpasses the
-<strong>value_threshold</strong> (explained below).</p>
+  }</code></pre>
+
+<p>This <b>collection_group</b> entry would cause gmond to collect the <b>cpu_num</b> metric once at startup (since the number of CPUs will not change between reboots). The metric <b>cpu_num</b> would be send every 1/2 hour (1800 seconds). The default value for the <b>time_threshold</b> is 3600 seconds if no <b>time_threshold</b> is specified.</p>
+
+<p>The <b>time_threshold</b> is the maximum amount of time that can pass before gmond sends all <b>metric</b>s specified in the <b>collection_group</b> to all configured <b>udp_send_channel</b>s. A <b>metric</b> may be sent before this <b>time_threshold</b> is met if during collection the value surpasses the <b>value_threshold</b> (explained below).</p>
+
 <p>Here is an example of a collection group for a volatile metric...</p>
-<pre>
-  collection_group {
+
+<pre><code>  collection_group {
     collect_every = 60
     time_threshold = 300
     metric {
@@ -411,73 +306,35 @@ configured <strong>udp_send_channel</str
       value_threshold = 10.0
       title = &quot;CPU Idle&quot;
     }
-  }</pre>
-<p>This collection group would collect the <strong>cpu_user</strong> and <strong>cpu_idle</strong> metrics
-every 60 seconds (specified in <strong>collect_every</strong>).  If <strong>cpu_user</strong> varies by
-5.0% or <strong>cpu_idle</strong> varies by 10.0%, then the entire <strong>collection_group</strong>
-is sent.  If no <strong>value_threshold</strong> is triggered within <strong>time_threshold</strong>
-seconds (in this case 300), the entire <strong>collection_group</strong> is sent.</p>
-<p>Each time the metric value is collected the new value is compared with
-the old value collected.  If the difference between the last value and
-the current value is greater than the <strong>value_threshold</strong>, the entire
-collection group is send to the <strong>udp_send_channel</strong>s defined.</p>
-<p>It's important to note that all metrics in a collection group are sent
-even when only a single <strong>value_threshold</strong> is surpassed.</p>
-<p>In addition a user friendly title can be substituted for the metric name
-by including a <strong>title</strong> within the <strong>metric</strong> section.</p>
-<p>By using the <strong>name_match</strong> parameter instead of <strong>name</strong>, it is possible
-to use a single definition to configure multiple metrics that match a
-regular expression.  The perl compatible regular expression (pcre) syntax
-is used.  This approach is particularly useful for a series of metrics
-that may vary in number between reboots (e.g. metric names that
-are generated for each individual NIC or CPU core).</p>
-<p>Here is an example of using the <strong>name_match</strong> directive to enable
-the multicpu metrics:</p>
-<pre>
-  metric {
+  }</code></pre>
+
+<p>This collection group would collect the <b>cpu_user</b> and <b>cpu_idle</b> metrics every 60 seconds (specified in <b>collect_every</b>). If <b>cpu_user</b> varies by 5.0% or <b>cpu_idle</b> varies by 10.0%, then the entire <b>collection_group</b> is sent. If no <b>value_threshold</b> is triggered within <b>time_threshold</b> seconds (in this case 300), the entire <b>collection_group</b> is sent.</p>
+
+<p>Each time the metric value is collected the new value is compared with the old value collected. If the difference between the last value and the current value is greater than the <b>value_threshold</b>, the entire collection group is send to the <b>udp_send_channel</b>s defined.</p>
+
+<p>It&#39;s important to note that all metrics in a collection group are sent even when only a single <b>value_threshold</b> is surpassed.</p>
+
+<p>In addition a user friendly title can be substituted for the metric name by including a <b>title</b> within the <b>metric</b> section.</p>
+
+<p>By using the <b>name_match</b> parameter instead of <b>name</b>, it is possible to use a single definition to configure multiple metrics that match a regular expression. The perl compatible regular expression (pcre) syntax is used. This approach is particularly useful for a series of metrics that may vary in number between reboots (e.g. metric names that are generated for each individual NIC or CPU core).</p>
+
+<p>Here is an example of using the <b>name_match</b> directive to enable the multicpu metrics:</p>
+
+<pre><code>  metric {
     name_match = &quot;multicpu_([a-z]+)([0-9]+)&quot;
     value_threshold = 1.0
     title = &quot;CPU-\\2 \\1&quot;
-  }</pre>
-<p>Note that in the example above, there are two matches: the alphabetical
-match matches the variations of the metric name (e.g. <strong>idle</strong>, <strong>system</strong>)
-while the numeric match matches the CPU core number.  The second thing
-to note is the use of substitutions within the argument to <strong>title</strong>.</p>
-<p>If both <strong>name</strong> and <strong>name_match</strong> are specified, then <strong>name</strong> is ignored.</p>
-<p>
-</p>
-<h2><a name="modules">Modules</a></h2>
-<p>A <strong>modules</strong> section contains the parameters that are necessary to load a
-metric module. A metric module is a dynamically loadable module that 
-extends the available metrics that gmond is able to collect. Each <strong>modules</strong>
-section contains at least one <strong>module</strong> section.  Within a <strong>module</strong> section
-are the directives <strong>name</strong>, <strong>language</strong>, <strong>enabled</strong>, <strong>path</strong> and <strong>params</strong>.  
-The module <strong>name</strong> is the name of the module as determined by the module 
-structure if the module was developed in C/C++.  Alternatively, the 
-<strong>name</strong> can be the name of the source file if the module has been 
-implemented in a interpreted language such as python.  A <strong>language</strong> 
-designation must be specified as a string value for each module.  The 
-<strong>language</strong> directive must correspond to the source code language in 
-which the module was implemented (ex. language = &quot;python&quot;).  If a 
-<strong>language</strong> directive does not exist for the module, the assumed 
-language will be &quot;C/C++&quot;. The <strong>enabled</strong> directive allows a metric module
-to be easily enabled or disabled through the configuration file. If the
-<strong>enabled</strong> directive is not included in the module configuration, the 
-enabled state will default to &quot;yes&quot;. One thing to note is that if a 
-module has been disabled yet the metric which that module implements 
-is still listed as part of a collection group, gmond will produce a 
-warning message.  However gmond will continue to function normally 
-by simply ignoring the metric. The <strong>path</strong> is the path from which 
-gmond is expected to load the  module (C/C++ compiled dynamically 
-loadable module only).  The <strong>params</strong> directive can be used to pass 
-a single string parameter directly to the module initialization 
-function (C/C++ module only). Multiple parameters can be passed to 
-the module's initialization function by including one or more 
-<strong>param</strong> sections. Each <strong>param</strong> section must be named and contain 
-a <strong>value</strong> directive. Once a module has been loaded, the additional 
-metrics can be discovered by invoking <strong>gmond -m</strong>.</p>
-<pre>
-   modules {
+  }</code></pre>
+
+<p>Note that in the example above, there are two matches: the alphabetical match matches the variations of the metric name (e.g. <b>idle</b>, <b>system</b>) while the numeric match matches the CPU core number. The second thing to note is the use of substitutions within the argument to <b>title</b>.</p>
+
+<p>If both <b>name</b> and <b>name_match</b> are specified, then <b>name</b> is ignored.</p>
+
+<h2 id="Modules">Modules</h2>
+
+<p>A <b>modules</b> section contains the parameters that are necessary to load a metric module. A metric module is a dynamically loadable module that extends the available metrics that gmond is able to collect. Each <b>modules</b> section contains at least one <b>module</b> section. Within a <b>module</b> section are the directives <b>name</b>, <b>language</b>, <b>enabled</b>, <b>path</b> and <b>params</b>. The module <b>name</b> is the name of the module as determined by the module structure if the module was developed in C/C++. Alternatively, the <b>name</b> can be the name of the source file if the module has been implemented in a interpreted language such as python. A <b>language</b> designation must be specified as a string value for each module. The <b>language</b> directive must correspond to the source code language in which the module was implemented (ex. language = &quot;python&quot;). If a <b>language</b> directive does not exist for the module, the assumed language will be &quot;C/C++&quot;. The <b>enabled</b> directive allows a metric module to be easily enabled or disabled through the configuration file. If the <b>enabled</b> directive is not included in the module configuration, the enabled state will default to &quot;yes&quot;. One thing to note is that if a module has been disabled yet the metric which that module implements is still listed as part of a collection group, gmond will produce a warning message. However gmond will continue to function normally by simply ignoring the metric. The <b>path</b> is the path from which gmond is expected to load the module (C/C++ compiled dynamically loadable module only). The <b>params</b> directive can be used to pass a single string parameter directly to the module initialization function (C/C++ module only). Multiple parameters can be passed to the module&#39;s initialization function by including one or more <b>param</b> sections. Each <b>param</b> section must be named and contain a <b>value</b> directive. Once a module has been loaded, the additional metrics can be discovered by invoking <b>gmond -m</b>.</p>
+
+<pre><code>   modules {
      module {
        name = &quot;example_module&quot;
        language = &quot;C/C++&quot;
@@ -491,84 +348,61 @@ metrics can be discovered by invoking <s
          value = 25
        }
      }
-   }</pre>
-<p>
-</p>
-<h2><a name="sflow">sFlow</a></h2>
-<p>The <strong>sflow</strong> group is optional and has the following optional
-attributes: <strong>udp_port</strong>, <strong>accept_vm_metrics</strong>, <strong>accept_http_metrics</strong>,
-<strong>accept_memcache_metrics</strong>, <strong>accept_jvm_metrics</strong>,
-<strong>multiple_http_instances</strong>,<strong>multiple_memcache_instances</strong>,
-<strong>multiple_jvm_instances</strong>. By default, a
-<strong>udp_recv_channel</strong> on port 6343 (the IANA registered port for
-sFlow) is all that is required to accept and process sFlow
-datagrams.  To receive sFlow on some other port requires both
-a <strong>udp_recv_channel</strong> for the other port and a <strong>udp_port</strong>
-setting here. For example:</p>
-<pre>
-   udp_recv_channel {
+   }</code></pre>
+
+<h2 id="sFlow">sFlow</h2>
+
+<p>The <b>sflow</b> group is optional and has the following optional attributes: <b>udp_port</b>, <b>accept_vm_metrics</b>, <b>accept_http_metrics</b>, <b>accept_memcache_metrics</b>, <b>accept_jvm_metrics</b>, <b>multiple_http_instances</b>,<b>multiple_memcache_instances</b>, <b>multiple_jvm_instances</b>. By default, a <b>udp_recv_channel</b> on port 6343 (the IANA registered port for sFlow) is all that is required to accept and process sFlow datagrams. To receive sFlow on some other port requires both a <b>udp_recv_channel</b> for the other port and a <b>udp_port</b> setting here. For example:</p>
+
+<pre><code>   udp_recv_channel {
      port = 7343
-   }</pre>
-<pre>
+   }
+
    sflow {
      udp_port = 7343
-   }</pre>
-<p>An sFlow agent running on a hypervisor may also be sending
-metrics for its local virtual machines.  By default these
-metrics are ignored, but the <strong>accept_vm_metrics</strong> flag can
-be used to accept those metrics too,  and prefix them with
-an identifier for each virtual machine.</p>
-<pre>
-   sflow {
+   }</code></pre>
+
+<p>An sFlow agent running on a hypervisor may also be sending metrics for its local virtual machines. By default these metrics are ignored, but the <b>accept_vm_metrics</b> flag can be used to accept those metrics too, and prefix them with an identifier for each virtual machine.</p>
+
+<pre><code>   sflow {
      accept_vm_metrics = yes
-   }</pre>
-<p>The sFlow feed may also contain metrics sent from HTTP or memcached
-servers,  or from Java VMs.  Extra options can be used to ignore
-or accept these metrics,  and to indicate that there may be multiple
-instances per host.  For example:</p>
-<pre>
-    sflow {
+   }</code></pre>
+
+<p>The sFlow feed may also contain metrics sent from HTTP or memcached servers, or from Java VMs. Extra options can be used to ignore or accept these metrics, and to indicate that there may be multiple instances per host. For example:</p>
+
+<pre><code>    sflow {
       accept_http_metrics = yes
       multiple_http_instances = yes
-    }</pre>
-<p>will allow the HTTP metrics, and also mark them with a distinguishing
-identifier so that each instance can be trended separately.  (If multiple
-instances are reporting and this flag is not set,  the results are likely
-to be garbled.)</p>
-<p>
-</p>
-<h2><a name="include">Include</a></h2>
-<p>This directive allows the user to include additional configuration files
-rather than having to add all gmond configuration directives to the
-gmond.conf file.  The following example includes any file with the extension
-of .conf contained in the directory conf.d as if the contents of the included 
-configuration files were part of the original gmond.conf file. This allows 
-the user to modularize their configuration file.  One usage example might 
-be to load individual metric modules by including module specific .conf files.</p>
-<p>include ('/etc/ganglia/conf.d/*.conf')</p>
-<p>
-</p>
-<hr />
-<h1><a name="access_control">ACCESS CONTROL</a></h1>
-<p>The <strong>udp_recv_channel</strong> and <strong>tcp_accept_channel</strong> directives
-can contain an Access Control List (ACL).  This ACL allows you to specify
-exactly which hosts gmond process data from.</p>
-<p>An example of an <strong>acl</strong> entry looks like</p>
-<pre>
-  acl {
+    }</code></pre>
+
+<p>will allow the HTTP metrics, and also mark them with a distinguishing identifier so that each instance can be trended separately. (If multiple instances are reporting and this flag is not set, the results are likely to be garbled.)</p>
+
+<h2 id="Include">Include</h2>
+
+<p>This directive allows the user to include additional configuration files rather than having to add all gmond configuration directives to the gmond.conf file. The following example includes any file with the extension of .conf contained in the directory conf.d as if the contents of the included configuration files were part of the original gmond.conf file. This allows the user to modularize their configuration file. One usage example might be to load individual metric modules by including module specific .conf files.</p>
+
+<p>include (&#39;/etc/ganglia/conf.d/*.conf&#39;)</p>
+
+<h1 id="ACCESS-CONTROL">ACCESS CONTROL</h1>
+
+<p>The <b>udp_recv_channel</b> and <b>tcp_accept_channel</b> directives can contain an Access Control List (ACL). This ACL allows you to specify exactly which hosts gmond process data from.</p>
+
+<p>An example of an <b>acl</b> entry looks like</p>
+
+<pre><code>  acl {
     default = &quot;deny&quot;
     access {
       ip = 192.168.0.4
       mask = 32
       action = &quot;allow&quot;
     }
-  }</pre>
-<p>This ACL will by default reject all traffic that is not specifically from
-host 192.168.0.4 (the mask size for an IPv4 address is 32, the mask size
-for an IPv6 address is 128 to represent a single host).</p>
+  }</code></pre>
+
+<p>This ACL will by default reject all traffic that is not specifically from host 192.168.0.4 (the mask size for an IPv4 address is 32, the mask size for an IPv6 address is 128 to represent a single host).</p>
+
 <p>Here is another example</p>
-<pre>
-  acl {
+
+<pre><code>  acl {
     default = &quot;allow&quot;
     access {
       ip = 192.168.0.0
@@ -580,16 +414,15 @@ for an IPv6 address is 128 to represent 
       mask = 120
       action = &quot;deny&quot;
     }
-  }</pre>
-<p>This ACL will by default allow all traffic unless it comes from the 
-two subnets specified with action = &quot;deny&quot;.</p>
-<p>
-</p>
-<hr />
-<h1><a name="example">EXAMPLE</a></h1>
+  }</code></pre>
+
+<p>This ACL will by default allow all traffic unless it comes from the two subnets specified with action = &quot;deny&quot;.</p>
+
+<h1 id="EXAMPLE">EXAMPLE</h1>
+
 <p>The default behavior for a 2.5.x gmond would be specified as...</p>
-<pre>
-  udp_recv_channel {
+
+<pre><code>  udp_recv_channel {
     mcast_join = 239.2.11.71
     bind       = 239.2.11.71
     port       = 8649
@@ -600,39 +433,40 @@ two subnets specified with action = &quo
   }
   tcp_accept_channel {
     port       = 8649
-  }</pre>
+  }</code></pre>
+
 <p>To see the complete default configuration for gmond simply run:</p>
-<pre>
-  % gmond -t</pre>
-<p>gmond will print out its default behavior in a configuration file
-and then exit.  Capturing this output to a file can serve as
-a useful starting point for creating your own custom configuration.</p>
-<pre>
-  % gmond -t &gt; custom.conf</pre>
-<p>edit <strong>custom.conf</strong> to taste and then</p>
-<pre>
-  % gmond -c ./custom.conf</pre>
-<p>
-</p>
-<hr />
-<h1><a name="see_also">SEE ALSO</a></h1>
-<p><code>gmond(1)</code>.</p>
-<p>
-</p>
-<hr />
-<h1><a name="notes">NOTES</a></h1>
-<p>The ganglia web site is at <a href="http://ganglia.info/.">http://ganglia.info/.</a></p>
-<p>
-</p>
-<hr />
-<h1><a name="copyright">COPYRIGHT</a></h1>
+
+<pre><code>  % gmond -t</code></pre>
+
+<p>gmond will print out its default behavior in a configuration file and then exit. Capturing this output to a file can serve as a useful starting point for creating your own custom configuration.</p>
+
+<pre><code>  % gmond -t &gt; custom.conf</code></pre>
+
+<p>edit <b>custom.conf</b> to taste and then</p>
+
+<pre><code>  % gmond -c ./custom.conf</code></pre>
+
+<h1 id="SEE-ALSO">SEE ALSO</h1>
+
+<p>gmond(1).</p>
+
+<h1 id="NOTES">NOTES</h1>
+
+<p>The ganglia web site is at http://ganglia.info/.</p>
+
+<h1 id="COPYRIGHT">COPYRIGHT</h1>
+
 <p>Copyright (c) 2005 The University of California, Berkeley</p>
+
 <table border="0" width="100%" cellspacing="0" cellpadding="3">
-<tr><td class="block" style="background-color: #cccccc" valign="middle">
-<big><strong><span class="block">&nbsp;Ganglia Monitoring Daemon v3.7.1 Configuration</span></strong></big>
+<tr><td class="_podblock_" style="background-color: #cccccc" valign="middle">
+<big><strong><span class="_podblock_">&nbsp;Ganglia Monitoring Daemon v3.7.1 Configuration</span></strong></big>
 </td></tr>
 </table>
 
 </body>
 
 </html>
+
+
diff -rupN original/ganglia-3.7.1/gmond/modules/Makefile.am new/ganglia-3.7.1/gmond/modules/Makefile.am
--- original/ganglia-3.7.1/gmond/modules/Makefile.am	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/gmond/modules/Makefile.am	2015-09-03 10:31:30.016062000 +0530
@@ -14,6 +14,7 @@ DIST_SUBDIRS = example
 DIST_SUBDIRS += cpu disk
 DIST_SUBDIRS += memory
 DIST_SUBDIRS += network
+DIST_SUBDIRS += bst
 DIST_SUBDIRS += system
 DIST_SUBDIRS += status
 DIST_SUBDIRS += python
@@ -23,6 +24,7 @@ SUBDIRS = cpu
 SUBDIRS += disk
 SUBDIRS += memory
 SUBDIRS += network
+SUBDIRS += bst
 SUBDIRS += system
 SUBDIRS += $(STATUS_SUBDIR)
 SUBDIRS += $(PYTHON_SUBDIR)
@@ -33,6 +35,7 @@ SUBDIRS += cpu
 SUBDIRS += disk
 SUBDIRS += memory
 SUBDIRS += network
+SUBDIRS += bst
 SUBDIRS += system
 SUBDIRS += $(STATUS_SUBDIR)
 SUBDIRS += $(PYTHON_SUBDIR)
diff -rupN original/ganglia-3.7.1/gmond/modules/Makefile.in new/ganglia-3.7.1/gmond/modules/Makefile.in
--- original/ganglia-3.7.1/gmond/modules/Makefile.in	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/gmond/modules/Makefile.in	2015-09-03 10:31:30.032063000 +0530
@@ -265,12 +265,12 @@ varstatedir = @varstatedir@
 @BUILD_PYTHON_TRUE@PYTHON_SUBDIR = python
 @BUILD_PERL_TRUE@PERL_SUBDIR = perl
 @BUILD_STATUS_TRUE@STATUS_SUBDIR = status
-DIST_SUBDIRS = example cpu disk memory network system status python \
+DIST_SUBDIRS = example cpu disk memory network bst system status python \
 	perl
-@STATIC_BUILD_FALSE@SUBDIRS = example cpu disk memory network system \
+@STATIC_BUILD_FALSE@SUBDIRS = example cpu disk memory bst network system \
 @STATIC_BUILD_FALSE@	$(STATUS_SUBDIR) $(PYTHON_SUBDIR) \
 @STATIC_BUILD_FALSE@	$(PERL_SUBDIR)
-@STATIC_BUILD_TRUE@SUBDIRS = cpu disk memory network system \
+@STATIC_BUILD_TRUE@SUBDIRS = cpu disk memory network bst system \
 @STATIC_BUILD_TRUE@	$(STATUS_SUBDIR) $(PYTHON_SUBDIR) \
 @STATIC_BUILD_TRUE@	$(PERL_SUBDIR)
 all: all-recursive
diff -rupN original/ganglia-3.7.1/scripts/fixconfig new/ganglia-3.7.1/scripts/fixconfig
--- original/ganglia-3.7.1/scripts/fixconfig	2015-03-23 22:05:43.000000000 +0530
+++ new/ganglia-3.7.1/scripts/fixconfig	1970-01-01 05:30:00.000000000 +0530
@@ -1,96 +0,0 @@
-#! /bin/sh
-
-##
-##  Make variable substitutions in configuration files.
-##
-##  This script does something very similar to what config.status does, but
-##  it fully resolves the various path variables (prefix, exec_prefix, etc.)
-##  so that they don't contain any variable substitutions.  It's easier to
-##  do this in a separate script than try to use eval or the like to resolve
-##  the variable names inside configure, particularly since prefix and
-##  exec_prefix aren't set until the end of the script.
-##
-##  The original form of this script was taken from the INN project
-##  which is under a BSD-style license
-##
-
-AWK="mawk"
-
-# The paths set by configure.
-prefix="/usr/local"
-exec_prefix="${prefix}"
-bindir="${exec_prefix}/bin"
-libexecdir="${exec_prefix}/libexec"
-libdir="/usr/local/lib64"
-sbindir="${exec_prefix}/sbin"
-sysconfdir="${prefix}/etc"
-includedir="${prefix}/include"
-runstatedir="${prefix}/var/run" # @runstatedir@ if autoconf >= 2.70
-if [ -d "${prefix}/etc/sysconfig" ]
-then
-  envdir="${prefix}/etc/sysconfig"
-else
-  envdir="${prefix}/etc/default"
-fi
-
-# Additional variables set by configure
-CFLAGS="`echo '-g -O2 -fno-strict-aliasing -Wall -D_REENTRANT' | $AWK '{ gsub(/,/, "\\\\,"); print }'`"
-LDFLAGS="`echo ' -lpthread  -lapr-1  ' | $AWK '{ gsub(/,/, "\\\\,"); print }'`"
-LIBS="-ldl -lnsl -lnsl -lz -lpcre -lexpat -lconfuse -lpthread "
-VERSION="3.7.1"
-host_cpu="x86_64"
-
-# Additional paths specific to Ganglia.
-moduledir="/usr/local/lib64/ganglia"
-varstatedir="/var/lib"
-
-# Additional variables that are substituted into configuration files.
-GANGLIA_MAJOR_VERSION="3"
-GANGLIA_MICRO_VERSION="1"
-GANGLIA_MINOR_VERSION="7"
-GANGLIA_VERSION="3.7.1"
-REL="1"
-
-# We can probably just assume sed is on the path, but since we have it, we may
-# as well use it.
-SED="/bin/sed"
-
-input="$1"
-if [ -z "$input" ] ; then
-    echo "No input file specified" >&2
-    exit 1
-fi
-
-output="$2"
-if [ -z "$output" ] ; then
-    output=`echo "$input" | $SED -e 's/\.in$//'`
-fi
-if [ x"$input" = x"$output" ] ; then
-    echo "No output file specified and input file doesn't end in .in" >&2
-    exit 1
-fi
-
-$SED -e "s,@prefix[@],$prefix,g" \
-     -e "s,@exec_prefix[@],$exec_prefix,g" \
-     -e "s,@bindir[@],$bindir,g" \
-     -e "s,@libexecdir[@],$libexecdir,g" \
-     -e "s,@libdir[@],$libdir,g" \
-     -e "s,@sbindir[@],$sbindir,g" \
-     -e "s,@sysconfdir[@],$sysconfdir,g" \
-     -e "s,@envdir[@],$envdir,g" \
-     -e "s,@runstatedir[@],$runstatedir,g" \
-     -e "s,@includedir[@],$includedir,g" \
-     -e "s,@CFLAGS[@],$CFLAGS,g" \
-     -e "s,@LDFLAGS[@],$LDFLAGS,g" \
-     -e "s,@LIBS[@],$LIBS,g" \
-     -e "s,@VERSION[@],$VERSION,g" \
-     -e "s,@host_cpu[@],$host_cpu,g" \
-     -e "s,@moduledir[@],$moduledir,g" \
-     -e "s,@varstatedir[@],$varstatedir,g" \
-     -e "s,@GANGLIA_MAJOR_VERSION[@],$GANGLIA_MAJOR_VERSION,g" \
-     -e "s,@GANGLIA_MICRO_VERSION[@],$GANGLIA_MICRO_VERSION,g" \
-     -e "s,@GANGLIA_MINOR_VERSION[@],$GANGLIA_MINOR_VERSION,g" \
-     -e "s,@GANGLIA_VERSION[@],$GANGLIA_VERSION,g" \
-     -e "s,@REL[@],$REL,g" \
-      < "$input" > "$output"
-
